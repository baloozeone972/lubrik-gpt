spring:
  application:
    n: user-service
  
  profiles:
    active: ${ENVIRONMENT:development}
  
  # Database Configuration
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:virtual_companion_db}
    username: ${DB_USERNAME:vc_admin}
    password: ${DB_PASSWORD:vc_secure_pass_2024}
    driver-class-n: org.postgresql.Driver
    hikari:
      maximum-pool-size: ${DB_MAX_CONNECTIONS:20}
      minimum-idle: 5
      connection-timeout: ${DB_CONNECTION_TIMEOUT:30000}
      idle-timeout: 600000
      max-lifetime: 1800000
      pool-n: UserServicePool
  
  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        jdbc:
          batch_size: 25
        order_inserts: true
        order_updates: true
        query:
          in_clause_parameter_padding: true
    show-sql: ${ENABLE_SQL_LOGGING:false}
  
  # Flyway Migration
  flyway:
    enabled: true
    baseline-on-migrate: true
    locations: classpath:db/migration
    validate-on-migrate: true
  
  # Redis Configuration
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:redis_secure_pass_2024}
      timeout: ${REDIS_CONNECTION_TIMEOUT:5000}
      lettuce:
        pool:
          max-active: ${REDIS_MAX_CONNECTIONS:50}
          max-idle: 10
          min-idle: 5
          max-wait: -1ms
  
  # Kafka Configuration
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      properties:
        enable.idempotence: true
        max.in.flight.requests.per.connection: 5
    consumer:
      group-id: ${KAFKA_CONSUMER_GROUP_ID:user-service-group}
      auto-offset-reset: ${KAFKA_AUTO_OFFSET_RESET:latest}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "com.virtualcompanion.*"
  
  # Mail Configuration
  mail:
    host: ${SMTP_HOST:localhost}
    port: ${SMTP_PORT:1025}
    username: ${SMTP_USERNAME:}
    password: ${SMTP_PASSWORD:}
    properties:
      mail:
        smtp:
          auth: false
          starttls:
            enable: ${SMTP_TLS_ENABLED:false}
          connectiontimeout: 5000
          timeout: 5000
          writetimeout: 5000
    default-encoding: UTF-8
  
  # Security Configuration
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:${server.port}
          jwk-set-uri: http://localhost:${server.port}/.well-known/jwks.json

server:
  port: ${USER_SERVICE_PORT:8081}
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain
  http2:
    enabled: true
  error:
    include-message: always
    include-binding-errors: always
    include-stacktrace: on_param
    include-exception: false

# Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,env,loggers,heapdump,threaddump
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true
  metrics:
    tags:
      application: ${spring.application.n}
      environment: ${ENVIRONMENT:development}
    export:
      prometheus:
        enabled: true
  tracing:
    sampling:
      probability: ${TRACING_SAMPLING_RATE:1.0}

# Application Configuration
app:
  # JWT Configuration
  jwt:
    secret: ${JWT_SECRET:your_very_long_and_secure_jwt_secret_key_minimum_512_bits}
    expiration-hours: ${JWT_EXPIRATION_HOURS:24}
    refresh-expiration-days: ${JWT_REFRESH_EXPIRATION_DAYS:30}
    issuer: Virtual Companion

  # Security Configuration
  security:
    bcrypt-rounds: ${BCRYPT_ROUNDS:12}
    max-login-attempts: 5
    lockout-duration-minutes: 30
    password-min-length: 8
    password-require-uppercase: true
    password-require-lowercase: true
    password-require-numbers: true
    password-require-special: true

  # 2FA Configuration
  twofa:
    enabled: true
    issuer: Virtual Companion
    qr-code-width: 200
    qr-code-height: 200

  # Age Verification
  age-verification:
    enabled: ${AGE_VERIFICATION_REQUIRED:true}
    minimum-age: ${MINIMUM_AGE:18}
    strict-mode: true

  # Email Configuration
  email:
    from: ${SMTP_FROM_EMAIL:noreply@virtualcompanion.app}
    from-n: ${SMTP_FROM_NAME:Virtual Companion}
    templates:
      verification: email/verification
      password-reset: email/password-reset
      welcome: email/welcome
      account-locked: email/account-locked

  # Rate Limiting
  rate-limiting:
    enabled: true
    default-limit: 100
    default-duration: 1m
    endpoints:
      login:
        limit: 5
        duration: 1m
      register:
        limit: 3
        duration: 10m
      password-reset:
        limit: 3
        duration: 1h

  # CORS Configuration
  cors:
    allowed-origins: ${GATEWAY_CORS_ALLOWED_ORIGINS:http://localhost:3000}
    allowed-methods: GET,POST,PUT,DELETE,OPTIONS
    allowed-headers: "*"
    exposed-headers: Authorization,X-Total-Count
    allow-credentials: true
    max-age: 3600

  # GeoIP Configuration
  geoip:
    enabled: true
    database-path: ${GEOIP_DATABASE_PATH:/data/GeoLite2-City.mmdb}
    blocked-countries: ${BLOCKED_COUNTRIES:}
    allowed-countries: ${ALLOWED_COUNTRIES:}

  # Compliance
  compliance:
    gdpr-enabled: ${GDPR_COMPLIANCE_ENABLED:true}
    ccpa-enabled: ${CCPA_COMPLIANCE_ENABLED:true}
    data-retention-days: ${DATA_RETENTION_DAYS:365}
    anonymize-on-deletion: true

# Logging Configuration
logging:
  level:
    root: ${LOG_LEVEL:INFO}
    com.virtualcompanion: ${LOG_LEVEL:INFO}
    org.springframework.security: ${LOG_LEVEL:INFO}
    org.hibernate.SQL: ${ENABLE_SQL_LOGGING:false}
    org.hibernate.type.descriptor.sql.BasicBinder: ${ENABLE_SQL_LOGGING:false}
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    n: logs/user-service.log
    max-size: 10MB
    max-history: 30

# OpenAPI Documentation
springdoc:
  api-docs:
    enabled: true
    path: /api-docs
  swagger-ui:
    enabled: true
    path: /swagger-ui.html
    tags-sorter: alpha
    operations-sorter: alpha
  show-actuator: true
  packages-to-scan: com.virtualcompanion.userservice

# Kafka Topics
kafka:
  topics:
    user-events: user-events
    user-verification: user-verification
    user-notifications: user-notifications
    audit-logs: audit-logs