// =============================================================================
// File: __tests__/accessibility/Components.test.tsx
// Generated by TypeScriptFileParser
// Date: Thu Jun 19 11:39:23 CEST 2025
// =============================================================================

import React from 'react';
import { render } from '@testing-library/react';
import { axe, toHaveNoViolations } from 'jest-axe';
import { LoginForm } from '@/components/auth/LoginForm';
import { CharacterCard } from '@/components/characters/CharacterCard';
import { ChatWindow } from '@/components/chat/ChatWindow';

expect.extend(toHaveNoViolations);

describe('Accessibility', () => {
  it('LoginForm has no accessibility violations', async () => {
    const { container } = render(<LoginForm />);
    const results = await axe(container);
    expect(results).toHaveNoViolations();
  });

  it('CharacterCard has no accessibility violations', async () => {
    const character = {
      id: '1',
      name: 'Test Character',
      description: 'Description',
      avatarUrl: '/avatar.jpg'
    };
    
    const { container } = render(
      <CharacterCard character={character} onSelect={() => {}} />
    );
    const results = await axe(container);
    expect(results).toHaveNoViolations();
  });

  it('ChatWindow has proper ARIA labels', () => {
    const { getByRole, getByLabelText } = render(
      <ChatWindow conversationId="123" />
    );

    expect(getByRole('main', { name: /chat/i })).toBeInTheDocument();
    expect(getByLabelText(/message input/i)).toBeInTheDocument();
    expect(getByRole('button', { name: /send message/i })).toBeInTheDocument();
  });

  it('supports keyboard navigation', async () => {
    const user = userEvent.setup();
    const onSelect = jest.fn();
    
    render(
      <>
        <CharacterCard character={character1} onSelect={onSelect} />
        <CharacterCard character={character2} onSelect={onSelect} />
      </>
    );

    // Tab through elements
    await user.tab();
    expect(screen.getByText('Character 1')).toHaveFocus();
    
    await user.tab();
    expect(screen.getByRole('button', { name: /chat with character 1/i })).toHaveFocus();
    
    // Activate with Enter
    await user.keyboard('{Enter}');
    expect(onSelect).toHaveBeenCalledWith(character1);
  });
});