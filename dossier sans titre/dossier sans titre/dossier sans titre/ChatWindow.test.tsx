// =============================================================================
// File: __tests__/components/chat/ChatWindow.test.tsx
// Generated by TypeScriptFileParser
// Date: Thu Jun 19 11:39:23 CEST 2025
// =============================================================================

import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { ChatWindow } from '@/components/chat/ChatWindow';
import { useConversationStore } from '@/store/conversation';
import { useWebSocket } from '@/hooks/useWebSocket';

jest.mock('@/store/conversation');
jest.mock('@/hooks/useWebSocket');

describe('ChatWindow', () => {
  const mockSendMessage = jest.fn();
  const mockMessages = [
    { id: '1', content: 'Hello!', role: 'user', timestamp: new Date() },
    { id: '2', content: 'Hi there!', role: 'assistant', timestamp: new Date() }
  ];

  beforeEach(() => {
    (useConversationStore as jest.Mock).mockReturnValue({
      messages: mockMessages,
      sendMessage: mockSendMessage,
      loading: false
    });
    (useWebSocket as jest.Mock).mockReturnValue({
      connected: true,
      sendMessage: jest.fn()
    });
  });

  it('renders messages correctly', () => {
    render(<ChatWindow conversationId="123" />);

    expect(screen.getByText('Hello!')).toBeInTheDocument();
    expect(screen.getByText('Hi there!')).toBeInTheDocument();
  });

  it('sends message on form submission', async () => {
    const user = userEvent.setup();
    render(<ChatWindow conversationId="123" />);

    const input = screen.getByPlaceholderText(/type a message/i);
    const sendButton = screen.getByRole('button', { name: /send/i });

    await user.type(input, 'Test message');
    await user.click(sendButton);

    expect(mockSendMessage).toHaveBeenCalledWith('123', 'Test message');
    expect(input).toHaveValue('');
  });

  it('handles enter key to send message', async () => {
    const user = userEvent.setup();
    render(<ChatWindow conversationId="123" />);

    const input = screen.getByPlaceholderText(/type a message/i);
    
    await user.type(input, 'Test message{enter}');

    expect(mockSendMessage).toHaveBeenCalledWith('123', 'Test message');
  });

  it('shows typing indicator', () => {
    (useConversationStore as jest.Mock).mockReturnValue({
      messages: mockMessages,
      sendMessage: mockSendMessage,
      loading: false,
      isTyping: true
    });

    render(<ChatWindow conversationId="123" />);

    expect(screen.getByTestId('typing-indicator')).toBeInTheDocument();
  });

  it('auto-scrolls to bottom on new messages', async () => {
    const { rerender } = render(<ChatWindow conversationId="123" />);

    const scrollIntoViewMock = jest.fn();
    HTMLElement.prototype.scrollIntoView = scrollIntoViewMock;

    // Add new message
    const newMessages = [...mockMessages, {
      id: '3',
      content: 'New message',
      role: 'assistant',
      timestamp: new Date()
    }];

    (useConversationStore as jest.Mock).mockReturnValue({
      messages: newMessages,
      sendMessage: mockSendMessage,
      loading: false
    });

    rerender(<ChatWindow conversationId="123" />);

    await waitFor(() => {
      expect(scrollIntoViewMock).toHaveBeenCalled();
    });
  });
});