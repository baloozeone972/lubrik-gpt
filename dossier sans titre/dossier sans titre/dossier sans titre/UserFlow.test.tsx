// =============================================================================
// File: __tests__/integration/UserFlow.test.tsx
// Generated by TypeScriptFileParser
// Date: Thu Jun 19 11:39:23 CEST 2025
// =============================================================================

import React from 'react';
import { render, screen, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { App } from '@/App';
import { setupServer } from 'msw/node';
import { rest } from 'msw';

const server = setupServer(
  rest.post('/api/v1/auth/login', (req, res, ctx) => {
    return res(ctx.json({
      token: 'test-token',
      user: { id: '1', email: 'test@example.com' }
    }));
  }),
  rest.get('/api/v1/characters', (req, res, ctx) => {
    return res(ctx.json({
      content: [
        { id: '1', name: 'Character 1' },
        { id: '2', name: 'Character 2' }
      ]
    }));
  }),
  rest.post('/api/v1/conversations', (req, res, ctx) => {
    return res(ctx.json({
      id: 'conv-1',
      characterId: '1',
      messages: []
    }));
  })
);

beforeAll(() => server.listen());
afterEach(() => server.resetHandlers());
afterAll(() => server.close());

describe('User Flow Integration', () => {
  it('completes full user journey', async () => {
    const user = userEvent.setup();
    
    render(<App />);

    // Login
    await user.type(screen.getByLabelText(/email/i), 'test@example.com');
    await user.type(screen.getByLabelText(/password/i), 'password123');
    await user.click(screen.getByRole('button', { name: /sign in/i }));

    // Wait for dashboard
    await waitFor(() => {
      expect(screen.getByText(/dashboard/i)).toBeInTheDocument();
    });

    // Navigate to characters
    await user.click(screen.getByText(/characters/i));

    // Select a character
    await waitFor(() => {
      expect(screen.getByText('Character 1')).toBeInTheDocument();
    });
    await user.click(screen.getByText('Character 1'));

    // Start conversation
    await user.click(screen.getByRole('button', { name: /start chat/i }));

    // Verify chat window opens
    await waitFor(() => {
      expect(screen.getByPlaceholderText(/type a message/i)).toBeInTheDocument();
    });
  });
});