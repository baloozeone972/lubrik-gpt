// =============================================================================
// File: __tests__/store/auth.test.ts
// Generated by TypeScriptFileParser
// Date: Thu Jun 19 11:39:23 CEST 2025
// =============================================================================

import { renderHook, act } from '@testing-library/react';
import { useAuthStore } from '@/store/auth';
import { apiClient } from '@/lib/api';

jest.mock('@/lib/api');

describe('AuthStore', () => {
  beforeEach(() => {
    // Reset store state
    useAuthStore.setState({
      user: null,
      isAuthenticated: false,
      loading: false,
      error: null
    });
  });

  it('handles successful login', async () => {
    const mockUser = { id: '1', email: 'test@example.com' };
    const mockToken = 'jwt-token';
    
    (apiClient.post as jest.Mock).mockResolvedValue({
      data: { user: mockUser, token: mockToken }
    });

    const { result } = renderHook(() => useAuthStore());

    await act(async () => {
      await result.current.login({ email: 'test@example.com', password: 'password' });
    });

    expect(result.current.user).toEqual(mockUser);
    expect(result.current.isAuthenticated).toBe(true);
    expect(localStorage.getItem('token')).toBe(mockToken);
  });

  it('handles logout', () => {
    const { result } = renderHook(() => useAuthStore());

    // Set initial authenticated state
    act(() => {
      useAuthStore.setState({
        user: { id: '1', email: 'test@example.com' },
        isAuthenticated: true
      });
    });

    act(() => {
      result.current.logout();
    });

    expect(result.current.user).toBeNull();
    expect(result.current.isAuthenticated).toBe(false);
    expect(localStorage.getItem('token')).toBeNull();
  });
});