// =============================================================================
// File: app/onboarding/page.tsx
// Generated by TypeScriptFileParser
// Date: Thu Jun 19 11:39:23 CEST 2025
// =============================================================================

'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  ChevronRight, ChevronLeft, Check, Sparkles,
  User, Heart, MessageSquare, Palette, Globe,
  Zap, Trophy, Gift, ArrowRight
} from 'lucide-react';
import { useAuthStore } from '@/store/auth';
import { useOnboardingStore } from '@/store/onboarding';
import { useToast } from '@/hooks/useToast';
import { Button } from '@/components/ui/Button';
import { Input } from '@/components/ui/Input';
import { Card } from '@/components/ui/Card';
import { Progress } from '@/components/ui/Progress';
import { Avatar } from '@/components/ui/Avatar';
import { CharacterCard } from '@/components/characters/CharacterCard';

const ONBOARDING_STEPS = [
  { id: 'welcome', title: 'Welcome', icon: Sparkles },
  { id: 'profile', title: 'Profile Setup', icon: User },
  { id: 'preferences', title: 'Preferences', icon: Heart },
  { id: 'character', title: 'Choose Character', icon: MessageSquare },
  { id: 'complete', title: 'All Set!', icon: Trophy }
];

export default function OnboardingPage() {
  const router = useRouter();
  const { user } = useAuthStore();
  const { currentStep, data, setStep, updateData, completeOnboarding } = useOnboardingStore();
  const { toast } = useToast();
  
  const [isLoading, setIsLoading] = useState(false);
  const [selectedCharacters, setSelectedCharacters] = useState<string[]>([]);

  useEffect(() => {
    if (!user) {
      router.push('/auth/login');
    }
  }, [user, router]);

  const handleNext = async () => {
    if (currentStep === ONBOARDING_STEPS.length - 1) {
      setIsLoading(true);
      try {
        await completeOnboarding();
        toast({
          title: 'Welcome aboard!',
          description: 'Your account setup is complete.'
        });
        router.push('/dashboard');
      } catch (error) {
        toast({
          title: 'Error',
          description: 'Failed to complete setup. Please try again.',
          variant: 'destructive'
        });
      } finally {
        setIsLoading(false);
      }
    } else {
      setStep(currentStep + 1);
    }
  };

  const handleBack = () => {
    if (currentStep > 0) {
      setStep(currentStep - 1);
    }
  };

  const renderStep = () => {
    switch (ONBOARDING_STEPS[currentStep].id) {
      case 'welcome':
        return <WelcomeStep />;
      case 'profile':
        return <ProfileStep data={data} updateData={updateData} />;
      case 'preferences':
        return <PreferencesStep data={data} updateData={updateData} />;
      case 'character':
        return (
          <CharacterStep 
            selectedCharacters={selectedCharacters}
            setSelectedCharacters={setSelectedCharacters}
            updateData={updateData}
          />
        );
      case 'complete':
        return <CompleteStep data={data} />;
      default:
        return null;
    }
  };

  const progress = ((currentStep + 1) / ONBOARDING_STEPS.length) * 100;

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-background to-secondary/10 flex items-center justify-center p-4">
      <motion.div
        initial={{ opacity: 0, scale: 0.95 }}
        animate={{ opacity: 1, scale: 1 }}
        className="w-full max-w-2xl"
      >
        {/* Progress Bar */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-2">
            {ONBOARDING_STEPS.map((step, index) => {
              const Icon = step.icon;
              const isActive = index === currentStep;
              const isCompleted = index < currentStep;
              
              return (
                <div
                  key={step.id}
                  className={`flex items-center ${
                    index < ONBOARDING_STEPS.length - 1 ? 'flex-1' : ''
                  }`}
                >
                  <div
                    className={`
                      w-10 h-10 rounded-full flex items-center justify-center
                      transition-all duration-300 relative
                      ${isActive ? 'bg-primary text-primary-foreground scale-110' : ''}
                      ${isCompleted ? 'bg-primary/20 text-primary' : ''}
                      ${!isActive && !isCompleted ? 'bg-muted text-muted-foreground' : ''}
                    `}
                  >
                    {isCompleted ? (
                      <Check className="w-5 h-5" />
                    ) : (
                      <Icon className="w-5 h-5" />
                    )}
                    {isActive && (
                      <div className="absolute inset-0 rounded-full animate-pulse bg-primary/20" />
                    )}
                  </div>
                  {index < ONBOARDING_STEPS.length - 1 && (
                    <div
                      className={`
                        flex-1 h-1 mx-2 rounded transition-all duration-300
                        ${isCompleted ? 'bg-primary' : 'bg-muted'}
                      `}
                    />
                  )}
                </div>
              );
            })}
          </div>
          <Progress value={progress} className="h-2" />
        </div>

        {/* Step Content */}
        <Card className="p-8">
          <AnimatePresence mode="wait">
            <motion.div
              key={currentStep}
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -20 }}
              transition={{ duration: 0.3 }}
            >
              {renderStep()}
            </motion.div>
          </AnimatePresence>

          {/* Navigation */}
          <div className="flex justify-between mt-8">
            <Button
              variant="ghost"
              onClick={handleBack}
              disabled={currentStep === 0}
              className={currentStep === 0 ? 'invisible' : ''}
            >
              <ChevronLeft className="w-4 h-4 mr-2" />
              Back
            </Button>
            
            <Button
              onClick={handleNext}
              disabled={isLoading}
              className="min-w-[120px]"
            >
              {isLoading ? (
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white" />
              ) : currentStep === ONBOARDING_STEPS.length - 1 ? (
                <>
                  Complete
                  <Check className="w-4 h-4 ml-2" />
                </>
              ) : (
                <>
                  Next
                  <ChevronRight className="w-4 h-4 ml-2" />
                </>
              )}
            </Button>
          </div>
        </Card>
      </motion.div>
    </div>
  );
}

// Step Components
function WelcomeStep() {
  return (
    <div className="text-center">
      <div className="w-20 h-20 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-6">
        <Sparkles className="w-10 h-10 text-primary" />
      </div>
      <h1 className="text-3xl font-bold mb-4">Welcome to Virtual Companion!</h1>
      <p className="text-lg text-muted-foreground mb-8">
        Let's get your account set up in just a few easy steps. This will only take a couple of minutes.
      </p>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-8">
        <div className="p-4 rounded-lg bg-muted/50">
          <Zap className="w-8 h-8 text-primary mx-auto mb-2" />
          <h3 className="font-medium mb-1">Quick Setup</h3>
          <p className="text-sm text-muted-foreground">Get started in minutes</p>
        </div>
        <div className="p-4 rounded-lg bg-muted/50">
          <Heart className="w-8 h-8 text-primary mx-auto mb-2" />
          <h3 className="font-medium mb-1">Personalized</h3>
          <p className="text-sm text-muted-foreground">Tailored to your preferences</p>
        </div>
        <div className="p-4 rounded-lg bg-muted/50">
          <Gift className="w-8 h-8 text-primary mx-auto mb-2" />
          <h3 className="font-medium mb-1">Free Trial</h3>
          <p className="text-sm text-muted-foreground">No credit card required</p>
        </div>
      </div>
    </div>
  );
}

function ProfileStep({ data, updateData }: any) {
  return (
    <div>
      <h2 className="text-2xl font-bold mb-4">Set up your profile</h2>
      <p className="text-muted-foreground mb-6">
        Tell us a bit about yourself. This helps personalize your experience.
      </p>
      
      <div className="space-y-6">
        <div>
          <label className="text-sm font-medium mb-2 block">Display Name</label>
          <Input
            placeholder="How should we call you?"
            value={data.displayName || ''}
            onChange={(e) => updateData({ displayName: e.target.value })}
            className="text-lg"
          />
        </div>
        
        <div>
          <label className="text-sm font-medium mb-2 block">Bio (Optional)</label>
          <textarea
            placeholder="Tell us about yourself..."
            value={data.bio || ''}
            onChange={(e) => updateData({ bio: e.target.value })}
            className="w-full px-3 py-2 border border-input bg-background rounded-md focus:outline-none focus:ring-2 focus:ring-primary"
            rows={4}
          />
        </div>
        
        <div>
          <label className="text-sm font-medium mb-2 block">Birthday (Optional)</label>
          <Input
            type="date"
            value={data.birthday || ''}
            onChange={(e) => updateData({ birthday: e.target.value })}
          />
          <p className="text-xs text-muted-foreground mt-1">
            We'll use this to celebrate with you!
          </p>
        </div>
      </div>
    </div>
  );
}

function PreferencesStep({ data, updateData }: any) {
  const preferences = data.preferences || {};
  
  const togglePreference = (key: string) => {
    updateData({
      preferences: {
        ...preferences,
        [key]: !preferences[key]
      }
    });
  };

  return (
    <div>
      <h2 className="text-2xl font-bold mb-4">Customize your experience</h2>
      <p className="text-muted-foreground mb-6">
        Select your interests to help us personalize your companion interactions.
      </p>
      
      <div className="space-y-4">
        <h3 className="font-medium mb-3">Content Preferences</h3>
        
        <label className="flex items-center p-4 rounded-lg border cursor-pointer hover:bg-muted/50 transition-colors">
          <input
            type="checkbox"
            checked={preferences.fantasy || false}
            onChange={() => togglePreference('fantasy')}
            className="mr-3"
          />
          <div className="flex items-center gap-3">
            <Sparkles className="w-5 h-5 text-primary" />
            <div>
              <div className="font-medium">Fantasy & Adventure</div>
              <div className="text-sm text-muted-foreground">
                Epic quests and magical worlds
              </div>
            </div>
          </div>
        </label>
        
        <label className="flex items-center p-4 rounded-lg border cursor-pointer hover:bg-muted/50 transition-colors">
          <input
            type="checkbox"
            checked={preferences.scifi || false}
            onChange={() => togglePreference('scifi')}
            className="mr-3"
          />
          <div className="flex items-center gap-3">
            <Zap className="w-5 h-5 text-primary" />
            <div>
              <div className="font-medium">Sci-Fi & Technology</div>
              <div className="text-sm text-muted-foreground">
                Futuristic settings and tech talks
              </div>
            </div>
          </div>
        </label>
        
        <label className="flex items-center p-4 rounded-lg border cursor-pointer hover:bg-muted/50 transition-colors">
          <input
            type="checkbox"
            checked={preferences.romance || false}
            onChange={() => togglePreference('romance')}
            className="mr-3"
          />
          <div className="flex items-center gap-3">
            <Heart className="w-5 h-5 text-primary" />
            <div>
              <div className="font-medium">Romance & Relationships</div>
              <div className="text-sm text-muted-foreground">
                Heartfelt connections and emotions
              </div>
            </div>
          </div>
        </label>
        
        <label className="flex items-center p-4 rounded-lg border cursor-pointer hover:bg-muted/50 transition-colors">
          <input
            type="checkbox"
            checked={preferences.educational || false}
            onChange={() => togglePreference('educational')}
            className="mr-3"
          />
          <div className="flex items-center gap-3">
            <Globe className="w-5 h-5 text-primary" />
            <div>
              <div className="font-medium">Educational & Learning</div>
              <div className="text-sm text-muted-foreground">
                Knowledge sharing and skill building
              </div>
            </div>
          </div>
        </label>
      </div>
    </div>
  );
}

function CharacterStep({ selectedCharacters, setSelectedCharacters, updateData }: any) {
  // Mock characters for demo
  const mockCharacters = [
    {
      id: '1',
      name: 'Luna',
      description: 'A wise and mystical guide',
      avatarUrl: '/avatars/luna.jpg',
      tags: ['Fantasy', 'Wisdom', 'Magic']
    },
    {
      id: '2',
      name: 'Atlas',
      description: 'An adventurous explorer',
      avatarUrl: '/avatars/atlas.jpg',
      tags: ['Adventure', 'Travel', 'Stories']
    },
    {
      id: '3',
      name: 'Nova',
      description: 'A tech-savvy companion',
      avatarUrl: '/avatars/nova.jpg',
      tags: ['Technology', 'Science', 'Future']
    }
  ];

  const toggleCharacter = (characterId: string) => {
    const newSelection = selectedCharacters.includes(characterId)
      ? selectedCharacters.filter(id => id !== characterId)
      : [...selectedCharacters, characterId];
    
    setSelectedCharacters(newSelection);
    updateData({ selectedCharacters: newSelection });
  };

  return (
    <div>
      <h2 className="text-2xl font-bold mb-4">Choose your first companion</h2>
      <p className="text-muted-foreground mb-6">
        Select one or more characters to start chatting with. You can always add more later!
      </p>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        {mockCharacters.map((character) => (
          <div
            key={character.id}
            onClick={() => toggleCharacter(character.id)}
            className={`
              cursor-pointer transition-all duration-200
              ${selectedCharacters.includes(character.id) ? 'scale-105' : ''}
            `}
          >
            <Card className={`
              p-4 hover:shadow-lg transition-shadow
              ${selectedCharacters.includes(character.id) ? 'ring-2 ring-primary' : ''}
            `}>
              <div className="aspect-square bg-muted rounded-lg mb-3 overflow-hidden">
                <div className="w-full h-full bg-gradient-to-br from-primary/20 to-secondary/20 flex items-center justify-center">
                  <User className="w-16 h-16 text-muted-foreground" />
                </div>
              </div>
              <h3 className="font-semibold mb-1">{character.name}</h3>
              <p className="text-sm text-muted-foreground mb-3">
                {character.description}
              </p>
              <div className="flex flex-wrap gap-1">
                {character.tags.map(tag => (
                  <span
                    key={tag}
                    className="text-xs px-2 py-1 bg-muted rounded-full"
                  >
                    {tag}
                  </span>
                ))}
              </div>
              {selectedCharacters.includes(character.id) && (
                <div className="absolute top-2 right-2 w-6 h-6 bg-primary rounded-full flex items-center justify-center">
                  <Check className="w-4 h-4 text-primary-foreground" />
                </div>
              )}
            </Card>
          </div>
        ))}
      </div>
    </div>
  );
}

function CompleteStep({ data }: any) {
  return (
    <div className="text-center">
      <div className="w-20 h-20 bg-green-100 dark:bg-green-900/20 rounded-full flex items-center justify-center mx-auto mb-6">
        <Trophy className="w-10 h-10 text-green-600" />
      </div>
      <h2 className="text-3xl font-bold mb-4">You're all set, {data.displayName || 'friend'}!</h2>
      <p className="text-lg text-muted-foreground mb-8">
        Your account is ready. Time to start your adventure!
      </p>
      
      <div className="bg-muted/50 rounded-lg p-6 mb-8">
        <h3 className="font-semibold mb-3">What's next?</h3>
        <div className="space-y-3 text-left">
          <div className="flex items-start gap-3">
            <div className="w-6 h-6 rounded-full bg-primary/20 flex items-center justify-center shrink-0 mt-0.5">
              <span className="text-xs font-bold text-primary">1</span>
            </div>
            <div>
              <p className="font-medium">Start chatting</p>
              <p className="text-sm text-muted-foreground">
                Jump into conversations with your chosen companions
              </p>
            </div>
          </div>
          
          <div className="flex items-start gap-3">
            <div className="w-6 h-6 rounded-full bg-primary/20 flex items-center justify-center shrink-0 mt-0.5">
              <span className="text-xs font-bold text-primary">2</span>
            </div>
            <div>
              <p className="font-medium">Explore characters</p>
              <p className="text-sm text-muted-foreground">
                Discover new companions in the character gallery
              </p>
            </div>
          </div>
          
          <div className="flex items-start gap-3">
            <div className="w-6 h-6 rounded-full bg-primary/20 flex items-center justify-center shrink-0 mt-0.5">
              <span className="text-xs font-bold text-primary">3</span>
            </div>
            <div>
              <p className="font-medium">Earn achievements</p>
              <p className="text-sm text-muted-foreground">
                Complete challenges and unlock special features
              </p>
            </div>
          </div>
        </div>
      </div>
      
      <div className="flex items-center justify-center gap-2 text-primary">
        <span className="text-lg font-medium">Let's get started</span>
        <ArrowRight className="w-5 h-5" />
      </div>
    </div>
  );
}