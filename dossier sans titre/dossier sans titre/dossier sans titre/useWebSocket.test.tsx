// =============================================================================
// File: __tests__/hooks/useWebSocket.test.tsx
// Generated by TypeScriptFileParser
// Date: Thu Jun 19 11:39:23 CEST 2025
// =============================================================================

import { renderHook, act } from '@testing-library/react';
import { useWebSocket } from '@/hooks/useWebSocket';
import WS from 'jest-websocket-mock';

describe('useWebSocket', () => {
  let server: WS;

  beforeEach(() => {
    server = new WS('ws://localhost:8080/ws');
  });

  afterEach(() => {
    WS.clean();
  });

  it('connects to WebSocket server', async () => {
    const { result } = renderHook(() => useWebSocket());

    await server.connected;
    
    expect(result.current.connected).toBe(true);
    expect(result.current.error).toBeNull();
  });

  it('handles incoming messages', async () => {
    const onMessage = jest.fn();
    const { result } = renderHook(() => useWebSocket({ onMessage }));

    await server.connected;

    act(() => {
      server.send(JSON.stringify({ type: 'message', data: 'Hello' }));
    });

    expect(onMessage).toHaveBeenCalledWith({
      type: 'message',
      data: 'Hello'
    });
  });

  it('handles connection errors', async () => {
    const { result } = renderHook(() => useWebSocket());

    act(() => {
      server.error();
    });

    expect(result.current.connected).toBe(false);
    expect(result.current.error).toBeTruthy();
  });

  it('reconnects on disconnection', async () => {
    const { result } = renderHook(() => useWebSocket({
      reconnect: true,
      reconnectInterval: 100
    }));

    await server.connected;

    act(() => {
      server.close();
    });

    expect(result.current.connected).toBe(false);

    // Wait for reconnection
    await act(async () => {
      await new Promise(resolve => setTimeout(resolve, 150));
    });

    await server.connected;
    expect(result.current.connected).toBe(true);
  });
});