// =============================================================================
// File: src/components/chat/MessageBubble.tsx
// Generated by TypeScriptFileParser
// Date: Thu Jun 19 20:53:16 CEST 2025
// =============================================================================

import React from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  Image,
  Dimensions,
} from 'react-native';
import Animated, {
  useAnimatedStyle,
  withTiming,
  interpolate,
} from 'react-native-reanimated';
import { format } from 'date-fns';
import { LinearGradient } from 'expo-linear-gradient';

import { Message } from '@/types/chat';
import { useTheme } from '@/hooks/useTheme';
import { styles } from '@/styles/MessageStyles';

const { width: SCREEN_WIDTH } = Dimensions.get('window');
const MAX_BUBBLE_WIDTH = SCREEN_WIDTH * 0.75;

interface MessageBubbleProps {
  message: Message;
  onLongPress?: () => void;
  showAvatar?: boolean;
}

export function MessageBubble({ 
  message, 
  onLongPress,
  showAvatar = true 
}: MessageBubbleProps) {
  const { theme } = useTheme();
  const isUser = message.role === 'user';

  const bubbleAnimatedStyle = useAnimatedStyle(() => ({
    opacity: withTiming(1, { duration: 300 }),
    transform: [
      {
        translateX: withTiming(0, {
          duration: 300,
        }),
      },
    ],
  }));

  const renderContent = () => {
    if (message.type === 'image' && message.imageUrl) {
      return (
        <TouchableOpacity onLongPress={onLongPress} activeOpacity={0.9}>
          <Image
            source={{ uri: message.imageUrl }}
            style={styles.messageImage}
            resizeMode="cover"
          />
        </TouchableOpacity>
      );
    }

    return (
      <TouchableOpacity
        onLongPress={onLongPress}
        activeOpacity={0.8}
        style={[
          styles.bubble,
          isUser ? styles.userBubble : styles.assistantBubble,
          { maxWidth: MAX_BUBBLE_WIDTH },
        ]}
      >
        {isUser ? (
          <LinearGradient
            colors={['#667eea', '#764ba2']}
            start={{ x: 0, y: 0 }}
            end={{ x: 1, y: 1 }}
            style={styles.gradientBubble}
          >
            <Text style={[styles.messageText, styles.userText]}>
              {message.content}
            </Text>
          </LinearGradient>
        ) : (
          <View style={[styles.plainBubble, { backgroundColor: theme.colors.card }]}>
            <Text style={[styles.messageText, { color: theme.colors.text }]}>
              {message.content}
            </Text>
          </View>
        )}
      </TouchableOpacity>
    );
  };

  return (
    <Animated.View
      style={[
        styles.messageContainer,
        isUser ? styles.userContainer : styles.assistantContainer,
        bubbleAnimatedStyle,
      ]}
    >
      {!isUser && showAvatar && (
        <Image
          source={{ uri: message.character?.avatarUrl || 'https://i.pravatar.cc/150' }}
          style={styles.avatar}
        />
      )}
      
      <View style={styles.contentContainer}>
        {renderContent()}
        
        <Text style={[
          styles.timestamp,
          isUser ? styles.userTimestamp : styles.assistantTimestamp,
        ]}>
          {format(new Date(message.createdAt), 'HH:mm')}
        </Text>
      </View>
    </Animated.View>
  );
}