// =============================================================================
// File: src/screens/HomeScreen.tsx
// Generated by TypeScriptFileParser
// Date: Thu Jun 19 20:53:16 CEST 2025
// =============================================================================

import React, { useCallback, useRef } from 'react';
import {
  View,
  Text,
  ScrollView,
  TouchableOpacity,
  RefreshControl,
  Dimensions,
  FlatList,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { useNavigation } from '@react-navigation/native';
import { LinearGradient } from 'expo-linear-gradient';
import Animated, {
  FadeInDown,
  FadeInRight,
  useAnimatedStyle,
  useSharedValue,
  withSpring,
} from 'react-native-reanimated';
import { Ionicons } from '@expo/vector-icons';

import { useAuth } from '@/hooks/useAuth';
import { useConversations } from '@/hooks/useConversations';
import { useCharacters } from '@/hooks/useCharacters';
import { ConversationCard } from '@/components/ConversationCard';
import { CharacterCard } from '@/components/CharacterCard';
import { SearchBar } from '@/components/SearchBar';
import { EmptyState } from '@/components/EmptyState';
import { LoadingState } from '@/components/LoadingState';
import { styles } from '@/styles/HomeStyles';

const { width: SCREEN_WIDTH } = Dimensions.get('window');

export function HomeScreen() {
  const navigation = useNavigation();
  const { user } = useAuth();
  const scrollY = useSharedValue(0);
  
  const {
    conversations,
    loading: conversationsLoading,
    refetch: refetchConversations,
  } = useConversations();
  
  const {
    characters,
    loading: charactersLoading,
    refetch: refetchCharacters,
  } = useCharacters({ featured: true });

  const [refreshing, setRefreshing] = React.useState(false);
  const [searchQuery, setSearchQuery] = React.useState('');

  const onRefresh = useCallback(async () => {
    setRefreshing(true);
    await Promise.all([
      refetchConversations(),
      refetchCharacters(),
    ]);
    setRefreshing(false);
  }, []);

  const headerAnimatedStyle = useAnimatedStyle(() => {
    return {
      transform: [
        {
          translateY: withSpring(
            scrollY.value > 50 ? -100 : 0,
            { damping: 15 }
          ),
        },
      ],
    };
  });

  const filteredConversations = conversations.filter(conv =>
    conv.character.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    conv.lastMessage?.content.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const renderHeader = () => (
    <Animated.View style={[styles.header, headerAnimatedStyle]}>
      <LinearGradient
        colors={['#667eea', '#764ba2']}
        start={{ x: 0, y: 0 }}
        end={{ x: 1, y: 1 }}
        style={styles.headerGradient}
      >
        <SafeAreaView edges={['top']}>
          <View style={styles.headerContent}>
            <View>
              <Text style={styles.greeting}>
                Good {getTimeOfDay()}, {user?.displayName || 'Friend'}! ðŸ‘‹
              </Text>
              <Text style={styles.subtitle}>
                Who would you like to chat with today?
              </Text>
            </View>
            <TouchableOpacity
              onPress={() => navigation.navigate('Profile')}
              style={styles.profileButton}
            >
              <Animated.Image
                entering={FadeInRight.delay(300)}
                source={{ uri: user?.avatarUrl || 'https://i.pravatar.cc/150' }}
                style={styles.profileImage}
              />
            </TouchableOpacity>
          </View>
        </SafeAreaView>
      </LinearGradient>
    </Animated.View>
  );

  const renderFeaturedCharacters = () => (
    <Animated.View 
      entering={FadeInDown.delay(200)}
      style={styles.section}
    >
      <View style={styles.sectionHeader}>
        <Text style={styles.sectionTitle}>Featured Characters</Text>
        <TouchableOpacity
          onPress={() => navigation.navigate('Characters')}
          style={styles.seeAllButton}
        >
          <Text style={styles.seeAllText}>See all</Text>
          <Ionicons name="arrow-forward" size={16} color="#667eea" />
        </TouchableOpacity>
      </View>

      {charactersLoading ? (
        <LoadingState />
      ) : (
        <FlatList
          horizontal
          showsHorizontalScrollIndicator={false}
          data={characters}
          keyExtractor={(item) => item.id}
          renderItem={({ item, index }) => (
            <Animated.View
              entering={FadeInRight.delay(index * 100)}
              style={styles.characterCardWrapper}
            >
              <CharacterCard
                character={item}
                onPress={() => navigation.navigate('Chat', { 
                  characterId: item.id,
                  isNewConversation: true 
                })}
              />
            </Animated.View>
          )}
          contentContainerStyle={styles.characterList}
        />
      )}
    </Animated.View>
  );

  const renderRecentConversations = () => (
    <Animated.View 
      entering={FadeInDown.delay(400)}
      style={styles.section}
    >
      <Text style={styles.sectionTitle}>Recent Conversations</Text>
      
      {conversationsLoading ? (
        <LoadingState />
      ) : filteredConversations.length === 0 ? (
        <EmptyState
          icon="chatbubbles-outline"
          title="No conversations yet"
          message="Start chatting with a character to see your conversations here"
          actionLabel="Browse Characters"
          onAction={() => navigation.navigate('Characters')}
        />
      ) : (
        <View style={styles.conversationList}>
          {filteredConversations.slice(0, 5).map((conversation, index) => (
            <Animated.View
              key={conversation.id}
              entering={FadeInDown.delay(500 + index * 100)}
            >
              <ConversationCard
                conversation={conversation}
                onPress={() => navigation.navigate('Chat', {
                  conversationId: conversation.id,
                  characterId: conversation.character.id,
                })}
              />
            </Animated.View>
          ))}
        </View>
      )}
    </Animated.View>
  );

  return (
    <View style={styles.container}>
      {renderHeader()}
      
      <ScrollView
        contentContainerStyle={styles.content}
        showsVerticalScrollIndicator={false}
        refreshControl={
          <RefreshControl
            refreshing={refreshing}
            onRefresh={onRefresh}
            tintColor="#667eea"
          />
        }
        onScroll={(event) => {
          scrollY.value = event.nativeEvent.contentOffset.y;
        }}
        scrollEventThrottle={16}
      >
        <SearchBar
          value={searchQuery}
          onChangeText={setSearchQuery}
          placeholder="Search conversations..."
          style={styles.searchBar}
        />

        {renderFeaturedCharacters()}
        {renderRecentConversations()}

        <View style={styles.bottomSpacing} />
      </ScrollView>
    </View>
  );
}

function getTimeOfDay() {
  const hour = new Date().getHours();
  if (hour < 12) return 'morning';
  if (hour < 18) return 'afternoon';
  return 'evening';
}