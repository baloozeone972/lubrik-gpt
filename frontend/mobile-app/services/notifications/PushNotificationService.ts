// =============================================================================
// File: src/services/notifications/PushNotificationService.ts
// Generated by TypeScriptFileParser
// Date: Thu Jun 19 20:53:16 CEST 2025
// =============================================================================

import * as Notifications from 'expo-notifications';
import * as Device from 'expo-device';
import Constants from 'expo-constants';
import { Platform } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';

import { api } from '@/services/api';

export class PushNotificationService {
  private static instance: PushNotificationService;
  
  static getInstance(): PushNotificationService {
    if (!PushNotificationService.instance) {
      PushNotificationService.instance = new PushNotificationService();
    }
    return PushNotificationService.instance;
  }

  async initialize() {
    // Configure notifications
    Notifications.setNotificationHandler({
      handleNotification: async () => ({
        shouldShowAlert: true,
        shouldPlaySound: true,
        shouldSetBadge: true,
      }),
    });

    // Get permission
    const token = await this.registerForPushNotifications();
    if (token) {
      await this.saveTokenToServer(token);
    }

    // Set up listeners
    this.setupListeners();
  }

  private async registerForPushNotifications(): Promise<string | null> {
    if (!Device.isDevice) {
      console.log('Push notifications only work on physical devices');
      return null;
    }

    const { status: existingStatus } = await Notifications.getPermissionsAsync();
    let finalStatus = existingStatus;

    if (existingStatus !== 'granted') {
      const { status } = await Notifications.requestPermissionsAsync();
      finalStatus = status;
    }

    if (finalStatus !== 'granted') {
      console.log('Failed to get push token for notifications');
      return null;
    }

    const projectId = Constants.expoConfig?.extra?.eas?.projectId;
    const token = (await Notifications.getExpoPushTokenAsync({ projectId })).data;
    
    if (Platform.OS === 'android') {
      await Notifications.setNotificationChannelAsync('default', {
        name: 'default',
        importance: Notifications.AndroidImportance.MAX,
        vibrationPattern: [0, 250, 250, 250],
        lightColor: '#667eea',
      });
    }

    return token;
  }

  private async saveTokenToServer(token: string) {
    try {
      const savedToken = await AsyncStorage.getItem('pushToken');
      
      if (savedToken !== token) {
        await api.post('/users/push-token', {
          token,
          platform: Platform.OS,
          deviceName: Device.deviceName,
        });
        
        await AsyncStorage.setItem('pushToken', token);
      }
    } catch (error) {
      console.error('Failed to save push token:', error);
    }
  }

  private setupListeners() {
    // Handle notification received while app is in foreground
    Notifications.addNotificationReceivedListener(notification => {
      console.log('Notification received:', notification);
    });

    // Handle notification response (user tapped on notification)
    Notifications.addNotificationResponseReceivedListener(response => {
      const data = response.notification.request.content.data;
      
      if (data.type === 'message') {
        // Navigate to chat
        this.navigateToChat(data.conversationId, data.characterId);
      } else if (data.type === 'character_update') {
        // Navigate to character profile
        this.navigateToCharacter(data.characterId);
      }
    });
  }

  async scheduleLocalNotification(
    title: string,
    body: string,
    data?: any,
    trigger?: Notifications.NotificationTriggerInput
  ) {
    await Notifications.scheduleNotificationAsync({
      content: {
        title,
        body,
        data,
        sound: true,
        priority: Notifications.AndroidNotificationPriority.HIGH,
      },
      trigger: trigger || null,
    });
  }

  async cancelAllNotifications() {
    await Notifications.cancelAllScheduledNotificationsAsync();
  }

  async setBadgeCount(count: number) {
    if (Platform.OS === 'ios') {
      await Notifications.setBadgeCountAsync(count);
    }
  }

  private navigateToChat(conversationId: string, characterId: string) {
    // This would be handled by navigation context
    // NavigationService.navigate('Chat', { conversationId, characterId });
  }

  private navigateToCharacter(characterId: string) {
    // NavigationService.navigate('Character', { characterId });
  }
}

// Initialize on app start
export const pushNotifications = PushNotificationService.getInstance();