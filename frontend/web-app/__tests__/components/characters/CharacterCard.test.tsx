// =============================================================================
// File: __tests__/components/characters/CharacterCard.test.tsx
// Generated by TypeScriptFileParser
// Date: Thu Jun 19 21:11:26 CEST 2025
// =============================================================================

import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { CharacterCard } from '@/components/characters/CharacterCard';
import { Character } from '@/types/character';

const mockCharacter: Character = {
  id: '1',
  name: 'Luna',
  description: 'A wise and mystical guide',
  avatarUrl: '/avatars/luna.jpg',
  traits: ['Wise', 'Mystical', 'Helpful'],
  rating: 4.5,
  conversationCount: 1234,
  isPublic: true,
  createdAt: new Date().toISOString()
};

describe('CharacterCard', () => {
  const mockOnSelect = jest.fn();
  const mockOnFavorite = jest.fn();

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('renders character information correctly', () => {
    render(
      <CharacterCard 
        character={mockCharacter} 
        onSelect={mockOnSelect}
      />
    );

    expect(screen.getByText('Luna')).toBeInTheDocument();
    expect(screen.getByText('A wise and mystical guide')).toBeInTheDocument();
    expect(screen.getByText('4.5')).toBeInTheDocument();
    expect(screen.getByText('1.2K conversations')).toBeInTheDocument();
  });

  it('displays character traits', () => {
    render(
      <CharacterCard 
        character={mockCharacter} 
        onSelect={mockOnSelect}
      />
    );

    mockCharacter.traits.forEach(trait => {
      expect(screen.getByText(trait)).toBeInTheDocument();
    });
  });

  it('handles character selection', () => {
    render(
      <CharacterCard 
        character={mockCharacter} 
        onSelect={mockOnSelect}
      />
    );

    fireEvent.click(screen.getByRole('button', { name: /chat now/i }));
    expect(mockOnSelect).toHaveBeenCalledWith(mockCharacter);
  });

  it('handles favorite toggle', () => {
    render(
      <CharacterCard 
        character={mockCharacter} 
        onSelect={mockOnSelect}
        onFavorite={mockOnFavorite}
      />
    );

    const favoriteButton = screen.getByTestId('favorite-button');
    fireEvent.click(favoriteButton);
    expect(mockOnFavorite).toHaveBeenCalledWith(mockCharacter.id);
  });

  it('shows selected state', () => {
    render(
      <CharacterCard 
        character={mockCharacter} 
        onSelect={mockOnSelect}
        isSelected
      />
    );

    const card = screen.getByTestId('character-card');
    expect(card).toHaveClass('ring-2', 'ring-primary');
  });

  it('handles image loading error', () => {
    render(
      <CharacterCard 
        character={mockCharacter} 
        onSelect={mockOnSelect}
      />
    );

    const image = screen.getByAltText('Luna');
    fireEvent.error(image);

    expect(screen.getByTestId('default-avatar')).toBeInTheDocument();
  });
});