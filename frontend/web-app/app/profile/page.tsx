// =============================================================================
// File: app/profile/page.tsx
// Generated by TypeScriptFileParser
// Date: Thu Jun 19 21:11:26 CEST 2025
// =============================================================================

'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import Image from 'next/image';
import { motion } from 'framer-motion';
import { 
  Camera, Edit3, Save, X, User, Mail, Phone, 
  Calendar, MapPin, Shield, CreditCard, Activity,
  Award, Heart, MessageSquare, Clock
} from 'lucide-react';
import { useAuthStore } from '@/store/auth';
import { useProfileStore } from '@/store/profile';
import { useToast } from '@/hooks/useToast';
import { Button } from '@/components/ui/Button';
import { Input } from '@/components/ui/Input';
import { Textarea } from '@/components/ui/Textarea';
import { Card } from '@/components/ui/Card';
import { Avatar } from '@/components/ui/Avatar';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/Tabs';
import { Progress } from '@/components/ui/Progress';
import { Badge } from '@/components/ui/Badge';
import { MediaUpload } from '@/components/media/MediaUpload';
import { StatsCard } from '@/components/profile/StatsCard';
import { AchievementList } from '@/components/profile/AchievementList';
import { ActivityFeed } from '@/components/profile/ActivityFeed';

export default function ProfilePage() {
  const router = useRouter();
  const { user } = useAuthStore();
  const { profile, loading, updateProfile, uploadAvatar } = useProfileStore();
  const { toast } = useToast();
  
  const [isEditing, setIsEditing] = useState(false);
  const [formData, setFormData] = useState({
    displayName: '',
    bio: '',
    location: '',
    website: '',
    birthday: ''
  });
  const [activeTab, setActiveTab] = useState('overview');

  useEffect(() => {
    if (!user) {
      router.push('/auth/login');
    } else if (profile) {
      setFormData({
        displayName: profile.displayName || '',
        bio: profile.bio || '',
        location: profile.location || '',
        website: profile.website || '',
        birthday: profile.birthday || ''
      });
    }
  }, [user, profile, router]);

  const handleSave = async () => {
    try {
      await updateProfile(formData);
      setIsEditing(false);
      toast({
        title: 'Profile updated',
        description: 'Your profile has been successfully updated.'
      });
    } catch (error) {
      toast({
        title: 'Error',
        description: 'Failed to update profile. Please try again.',
        variant: 'destructive'
      });
    }
  };

  const handleAvatarUpload = async (file: File) => {
    try {
      await uploadAvatar(file);
      toast({
        title: 'Avatar updated',
        description: 'Your profile picture has been updated.'
      });
    } catch (error) {
      toast({
        title: 'Error',
        description: 'Failed to upload avatar. Please try again.',
        variant: 'destructive'
      });
    }
  };

  if (loading || !profile) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-background to-secondary/10">
      <div className="container mx-auto px-4 py-8">
        {/* Profile Header */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="mb-8"
        >
          <Card className="p-8 relative overflow-hidden">
            <div className="absolute inset-0 bg-gradient-to-r from-primary/10 to-secondary/10" />
            
            <div className="relative flex flex-col md:flex-row items-start gap-6">
              {/* Avatar */}
              <div className="relative group">
                <Avatar 
                  src={profile.avatarUrl} 
                  alt={profile.displayName}
                  className="w-32 h-32 ring-4 ring-background"
                />
                <MediaUpload
                  accept="image/*"
                  onUpload={handleAvatarUpload}
                  className="absolute inset-0 flex items-center justify-center bg-black/50 rounded-full opacity-0 group-hover:opacity-100 transition-opacity cursor-pointer"
                >
                  <Camera className="w-8 h-8 text-white" />
                </MediaUpload>
              </div>

              {/* Profile Info */}
              <div className="flex-1">
                <div className="flex items-start justify-between">
                  <div>
                    <h1 className="text-3xl font-bold mb-2">
                      {profile.displayName || user?.email}
                    </h1>
                    <p className="text-muted-foreground mb-4">
                      Member since {new Date(profile.createdAt).toLocaleDateString()}
                    </p>
                    {profile.bio && (
                      <p className="text-foreground/80 max-w-2xl">{profile.bio}</p>
                    )}
                  </div>
                  
                  {!isEditing ? (
                    <Button onClick={() => setIsEditing(true)} variant="outline">
                      <Edit3 className="w-4 h-4 mr-2" />
                      Edit Profile
                    </Button>
                  ) : (
                    <div className="flex gap-2">
                      <Button onClick={handleSave} size="sm">
                        <Save className="w-4 h-4 mr-2" />
                        Save
                      </Button>
                      <Button 
                        onClick={() => setIsEditing(false)} 
                        variant="ghost" 
                        size="sm"
                      >
                        <X className="w-4 h-4" />
                      </Button>
                    </div>
                  )}
                </div>

                {/* Stats */}
                <div className="flex flex-wrap gap-6 mt-6">
                  <div className="text-center">
                    <div className="text-2xl font-bold">{profile.stats.totalConversations}</div>
                    <div className="text-sm text-muted-foreground">Conversations</div>
                  </div>
                  <div className="text-center">
                    <div className="text-2xl font-bold">{profile.stats.totalMessages}</div>
                    <div className="text-sm text-muted-foreground">Messages</div>
                  </div>
                  <div className="text-center">
                    <div className="text-2xl font-bold">{profile.stats.totalCharacters}</div>
                    <div className="text-sm text-muted-foreground">Characters</div>
                  </div>
                  <div className="text-center">
                    <div className="text-2xl font-bold">{profile.level}</div>
                    <div className="text-sm text-muted-foreground">Level</div>
                  </div>
                </div>
              </div>
            </div>
          </Card>
        </motion.div>

        {/* Profile Tabs */}
        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
          <TabsList className="grid w-full grid-cols-4 lg:w-auto">
            <TabsTrigger value="overview">Overview</TabsTrigger>
            <TabsTrigger value="details">Details</TabsTrigger>
            <TabsTrigger value="achievements">Achievements</TabsTrigger>
            <TabsTrigger value="activity">Activity</TabsTrigger>
          </TabsList>

          <TabsContent value="overview" className="space-y-6">
            {/* Stats Grid */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
              <StatsCard
                title="Total Time"
                value={`${Math.floor(profile.stats.totalTime / 60)}h ${profile.stats.totalTime % 60}m`}
                icon={Clock}
                trend={+12}
              />
              <StatsCard
                title="Characters Met"
                value={profile.stats.totalCharacters}
                icon={Heart}
                trend={+3}
              />
              <StatsCard
                title="Messages Sent"
                value={profile.stats.totalMessages}
                icon={MessageSquare}
                trend={+24}
              />
              <StatsCard
                title="Achievements"
                value={profile.achievements.length}
                icon={Award}
                trend={+2}
              />
            </div>

            {/* Level Progress */}
            <Card className="p-6">
              <h3 className="text-lg font-semibold mb-4">Level Progress</h3>
              <div className="space-y-3">
                <div className="flex justify-between text-sm">
                  <span>Level {profile.level}</span>
                  <span>{profile.experience} / {profile.nextLevelExp} XP</span>
                </div>
                <Progress 
                  value={(profile.experience / profile.nextLevelExp) * 100} 
                  className="h-3"
                />
                <p className="text-sm text-muted-foreground">
                  {profile.nextLevelExp - profile.experience} XP to level {profile.level + 1}
                </p>
              </div>
            </Card>

            {/* Recent Achievements */}
            <Card className="p-6">
              <h3 className="text-lg font-semibold mb-4">Recent Achievements</h3>
              <AchievementList 
                achievements={profile.achievements.slice(0, 3)} 
                compact 
              />
            </Card>
          </TabsContent>

          <TabsContent value="details" className="space-y-6">
            {isEditing ? (
              <Card className="p-6">
                <h3 className="text-lg font-semibold mb-4">Edit Profile</h3>
                <div className="space-y-4">
                  <div>
                    <label className="text-sm font-medium mb-1 block">Display Name</label>
                    <Input
                      value={formData.displayName}
                      onChange={(e) => setFormData({ ...formData, displayName: e.target.value })}
                      placeholder="Your display name"
                    />
                  </div>
                  
                  <div>
                    <label className="text-sm font-medium mb-1 block">Bio</label>
                    <Textarea
                      value={formData.bio}
                      onChange={(e) => setFormData({ ...formData, bio: e.target.value })}
                      placeholder="Tell us about yourself"
                      rows={4}
                    />
                  </div>
                  
                  <div>
                    <label className="text-sm font-medium mb-1 block">Location</label>
                    <Input
                      value={formData.location}
                      onChange={(e) => setFormData({ ...formData, location: e.target.value })}
                      placeholder="City, Country"
                    />
                  </div>
                  
                  <div>
                    <label className="text-sm font-medium mb-1 block">Website</label>
                    <Input
                      value={formData.website}
                      onChange={(e) => setFormData({ ...formData, website: e.target.value })}
                      placeholder="https://example.com"
                      type="url"
                    />
                  </div>
                  
                  <div>
                    <label className="text-sm font-medium mb-1 block">Birthday</label>
                    <Input
                      value={formData.birthday}
                      onChange={(e) => setFormData({ ...formData, birthday: e.target.value })}
                      type="date"
                    />
                  </div>
                </div>
              </Card>
            ) : (
              <>
                <Card className="p-6">
                  <h3 className="text-lg font-semibold mb-4">Profile Information</h3>
                  <div className="space-y-4">
                    <div className="flex items-center gap-3">
                      <User className="w-5 h-5 text-muted-foreground" />
                      <div>
                        <p className="text-sm text-muted-foreground">Display Name</p>
                        <p className="font-medium">{profile.displayName || 'Not set'}</p>
                      </div>
                    </div>
                    
                    <div className="flex items-center gap-3">
                      <Mail className="w-5 h-5 text-muted-foreground" />
                      <div>
                        <p className="text-sm text-muted-foreground">Email</p>
                        <p className="font-medium">{user?.email}</p>
                      </div>
                    </div>
                    
                    <div className="flex items-center gap-3">
                      <MapPin className="w-5 h-5 text-muted-foreground" />
                      <div>
                        <p className="text-sm text-muted-foreground">Location</p>
                        <p className="font-medium">{profile.location || 'Not set'}</p>
                      </div>
                    </div>
                    
                    <div className="flex items-center gap-3">
                      <Calendar className="w-5 h-5 text-muted-foreground" />
                      <div>
                        <p className="text-sm text-muted-foreground">Birthday</p>
                        <p className="font-medium">
                          {profile.birthday ? new Date(profile.birthday).toLocaleDateString() : 'Not set'}
                        </p>
                      </div>
                    </div>
                  </div>
                </Card>

                <Card className="p-6">
                  <h3 className="text-lg font-semibold mb-4">Account Status</h3>
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <Shield className="w-5 h-5 text-muted-foreground" />
                        <div>
                          <p className="font-medium">Account Type</p>
                          <p className="text-sm text-muted-foreground">
                            {profile.subscription?.tier || 'Free'}
                          </p>
                        </div>
                      </div>
                      <Badge variant={profile.subscription ? 'default' : 'secondary'}>
                        {profile.subscription ? 'Premium' : 'Free'}
                      </Badge>
                    </div>
                    
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <CreditCard className="w-5 h-5 text-muted-foreground" />
                        <div>
                          <p className="font-medium">Billing</p>
                          <p className="text-sm text-muted-foreground">
                            {profile.subscription ? 'Active subscription' : 'No active subscription'}
                          </p>
                        </div>
                      </div>
                      {profile.subscription && (
                        <Button variant="outline" size="sm">Manage</Button>
                      )}
                    </div>
                  </div>
                </Card>
              </>
            )}
          </TabsContent>

          <TabsContent value="achievements" className="space-y-6">
            <Card className="p-6">
              <h3 className="text-lg font-semibold mb-4">All Achievements</h3>
              <AchievementList achievements={profile.achievements} />
            </Card>
          </TabsContent>

          <TabsContent value="activity" className="space-y-6">
            <Card className="p-6">
              <h3 className="text-lg font-semibold mb-4">Recent Activity</h3>
              <ActivityFeed userId={user!.id} />
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}