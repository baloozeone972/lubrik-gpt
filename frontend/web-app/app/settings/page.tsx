// =============================================================================
// File: app/settings/page.tsx
// Generated by TypeScriptFileParser
// Date: Thu Jun 19 21:11:26 CEST 2025
// =============================================================================

'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { motion } from 'framer-motion';
import {
  Settings, User, Bell, Shield, Palette, Globe,
  CreditCard, Key, Database, LogOut, Trash2,
  Moon, Sun, Monitor, Volume2, Mic, Video,
  Mail, MessageSquare, Heart, AlertCircle
} from 'lucide-react';
import { useAuthStore } from '@/store/auth';
import { useSettingsStore } from '@/store/settings';
import { useTheme } from '@/hooks/useTheme';
import { useToast } from '@/hooks/useToast';
import { Card } from '@/components/ui/Card';
import { Button } from '@/components/ui/Button';
import { Input } from '@/components/ui/Input';
import { Switch } from '@/components/ui/Switch';
import { Select } from '@/components/ui/Select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/Tabs';
import { Label } from '@/components/ui/Label';
import { Separator } from '@/components/ui/Separator';
import { Dialog } from '@/components/ui/Dialog';

export default function SettingsPage() {
  const router = useRouter();
  const { user, logout } = useAuthStore();
  const { settings, updateSettings, resetSettings } = useSettingsStore();
  const { theme, setTheme } = useTheme();
  const { toast } = useToast();
  
  const [activeTab, setActiveTab] = useState('general');
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  const handleSaveSettings = async (section: string, data: any) => {
    setIsLoading(true);
    try {
      await updateSettings(section, data);
      toast({
        title: 'Settings saved',
        description: 'Your settings have been updated successfully.'
      });
    } catch (error) {
      toast({
        title: 'Error',
        description: 'Failed to save settings. Please try again.',
        variant: 'destructive'
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleDeleteAccount = async () => {
    // Implement account deletion
    toast({
      title: 'Account deletion',
      description: 'This feature is coming soon.',
      variant: 'destructive'
    });
  };

  const handleExportData = async () => {
    try {
      const response = await fetch('/api/v1/users/export', {
        headers: {
          'Authorization': `Bearer ${user?.token}`
        }
      });
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'user-data.json';
      a.click();
    } catch (error) {
      toast({
        title: 'Export failed',
        description: 'Failed to export your data. Please try again.',
        variant: 'destructive'
      });
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-background to-secondary/10">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="mb-8"
        >
          <h1 className="text-3xl font-bold mb-2">Settings</h1>
          <p className="text-muted-foreground">Manage your account preferences and settings</p>
        </motion.div>

        {/* Settings Tabs */}
        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
          <TabsList className="grid w-full grid-cols-2 md:grid-cols-4 lg:grid-cols-6">
            <TabsTrigger value="general">General</TabsTrigger>
            <TabsTrigger value="notifications">Notifications</TabsTrigger>
            <TabsTrigger value="privacy">Privacy</TabsTrigger>
            <TabsTrigger value="appearance">Appearance</TabsTrigger>
            <TabsTrigger value="audio">Audio & Video</TabsTrigger>
            <TabsTrigger value="account">Account</TabsTrigger>
          </TabsList>

          {/* General Settings */}
          <TabsContent value="general" className="space-y-6">
            <Card className="p-6">
              <h2 className="text-xl font-semibold mb-4">General Settings</h2>
              
              <div className="space-y-6">
                <div>
                  <Label htmlFor="language">Language</Label>
                  <Select
                    id="language"
                    value={settings.language}
                    onValueChange={(value) => handleSaveSettings('general', { language: value })}
                    className="mt-2"
                  >
                    <option value="en">English</option>
                    <option value="es">Español</option>
                    <option value="fr">Français</option>
                    <option value="de">Deutsch</option>
                    <option value="ja">日本語</option>
                  </Select>
                </div>

                <div>
                  <Label htmlFor="timezone">Timezone</Label>
                  <Select
                    id="timezone"
                    value={settings.timezone}
                    onValueChange={(value) => handleSaveSettings('general', { timezone: value })}
                    className="mt-2"
                  >
                    <option value="UTC">UTC</option>
                    <option value="America/New_York">Eastern Time</option>
                    <option value="America/Chicago">Central Time</option>
                    <option value="America/Los_Angeles">Pacific Time</option>
                    <option value="Europe/London">London</option>
                    <option value="Europe/Paris">Paris</option>
                    <option value="Asia/Tokyo">Tokyo</option>
                  </Select>
                </div>

                <div className="flex items-center justify-between">
                  <div>
                    <Label htmlFor="auto-save">Auto-save conversations</Label>
                    <p className="text-sm text-muted-foreground">
                      Automatically save your conversation history
                    </p>
                  </div>
                  <Switch
                    id="auto-save"
                    checked={settings.autoSave}
                    onCheckedChange={(checked) => handleSaveSettings('general', { autoSave: checked })}
                  />
                </div>

                <div className="flex items-center justify-between">
                  <div>
                    <Label htmlFor="typing-indicators">Show typing indicators</Label>
                    <p className="text-sm text-muted-foreground">
                      Show when characters are typing
                    </p>
                  </div>
                  <Switch
                    id="typing-indicators"
                    checked={settings.showTypingIndicators}
                    onCheckedChange={(checked) => handleSaveSettings('general', { showTypingIndicators: checked })}
                  />
                </div>
              </div>
            </Card>
          </TabsContent>

          {/* Notifications Settings */}
          <TabsContent value="notifications" className="space-y-6">
            <Card className="p-6">
              <h2 className="text-xl font-semibold mb-4">Notification Preferences</h2>
              
              <div className="space-y-6">
                <div className="flex items-center justify-between">
                  <div>
                    <Label htmlFor="push-notifications">Push notifications</Label>
                    <p className="text-sm text-muted-foreground">
                      Receive notifications on your device
                    </p>
                  </div>
                  <Switch
                    id="push-notifications"
                    checked={settings.notifications.push}
                    onCheckedChange={(checked) => 
                      handleSaveSettings('notifications', { push: checked })
                    }
                  />
                </div>

                <div className="flex items-center justify-between">
                  <div>
                    <Label htmlFor="email-notifications">Email notifications</Label>
                    <p className="text-sm text-muted-foreground">
                      Receive updates via email
                    </p>
                  </div>
                  <Switch
                    id="email-notifications"
                    checked={settings.notifications.email}
                    onCheckedChange={(checked) => 
                      handleSaveSettings('notifications', { email: checked })
                    }
                  />
                </div>

                <Separator />

                <h3 className="font-medium">Notification Types</h3>

                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <MessageSquare className="w-5 h-5 text-muted-foreground" />
                      <Label htmlFor="message-notifications">New messages</Label>
                    </div>
                    <Switch
                      id="message-notifications"
                      checked={settings.notifications.messages}
                      onCheckedChange={(checked) => 
                        handleSaveSettings('notifications', { messages: checked })
                      }
                    />
                  </div>

                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <Heart className="w-5 h-5 text-muted-foreground" />
                      <Label htmlFor="character-notifications">Character updates</Label>
                    </div>
                    <Switch
                      id="character-notifications"
                      checked={settings.notifications.characterUpdates}
                      onCheckedChange={(checked) => 
                        handleSaveSettings('notifications', { characterUpdates: checked })
                      }
                    />
                  </div>

                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <CreditCard className="w-5 h-5 text-muted-foreground" />
                      <Label htmlFor="billing-notifications">Billing updates</Label>
                    </div>
                    <Switch
                      id="billing-notifications"
                      checked={settings.notifications.billing}
                      onCheckedChange={(checked) => 
                        handleSaveSettings('notifications', { billing: checked })
                      }
                    />
                  </div>
                </div>
              </div>
            </Card>
          </TabsContent>

          {/* Privacy Settings */}
          <TabsContent value="privacy" className="space-y-6">
            <Card className="p-6">
              <h2 className="text-xl font-semibold mb-4">Privacy & Security</h2>
              
              <div className="space-y-6">
                <div className="flex items-center justify-between">
                  <div>
                    <Label htmlFor="profile-visibility">Public profile</Label>
                    <p className="text-sm text-muted-foreground">
                      Allow others to see your profile
                    </p>
                  </div>
                  <Switch
                    id="profile-visibility"
                    checked={settings.privacy.publicProfile}
                    onCheckedChange={(checked) => 
                      handleSaveSettings('privacy', { publicProfile: checked })
                    }
                  />
                </div>

                <div className="flex items-center justify-between">
                  <div>
                    <Label htmlFor="activity-status">Show activity status</Label>
                    <p className="text-sm text-muted-foreground">
                      Let others see when you're online
                    </p>
                  </div>
                  <Switch
                    id="activity-status"
                    checked={settings.privacy.showActivity}
                    onCheckedChange={(checked) => 
                      handleSaveSettings('privacy', { showActivity: checked })
                    }
                  />
                </div>

                <div className="flex items-center justify-between">
                  <div>
                    <Label htmlFor="data-collection">Analytics & improvements</Label>
                    <p className="text-sm text-muted-foreground">
                      Help improve the app by sharing usage data
                    </p>
                  </div>
                  <Switch
                    id="data-collection"
                    checked={settings.privacy.analytics}
                    onCheckedChange={(checked) => 
                      handleSaveSettings('privacy', { analytics: checked })
                    }
                  />
                </div>

                <Separator />

                <div className="space-y-4">
                  <h3 className="font-medium">Data Management</h3>
                  
                  <Button 
                    variant="outline" 
                    className="w-full justify-start"
                    onClick={handleExportData}
                  >
                    <Database className="w-4 h-4 mr-2" />
                    Export my data
                  </Button>

                  <Button 
                    variant="outline" 
                    className="w-full justify-start text-destructive"
                    onClick={() => setShowDeleteDialog(true)}
                  >
                    <Trash2 className="w-4 h-4 mr-2" />
                    Delete my account
                  </Button>
                </div>
              </div>
            </Card>

            <Card className="p-6 border-amber-500/20 bg-amber-50/5 dark:bg-amber-950/10">
              <div className="flex gap-3">
                <AlertCircle className="w-5 h-5 text-amber-500 shrink-0 mt-0.5" />
                <div>
                  <h3 className="font-medium text-amber-500 mb-1">Privacy Notice</h3>
                  <p className="text-sm text-muted-foreground">
                    Your conversations are encrypted and stored securely. We never share your personal data with third parties.
                    Read our <a href="/privacy" className="underline">Privacy Policy</a> for more information.
                  </p>
                </div>
              </div>
            </Card>
          </TabsContent>

          {/* Appearance Settings */}
          <TabsContent value="appearance" className="space-y-6">
            <Card className="p-6">
              <h2 className="text-xl font-semibold mb-4">Appearance</h2>
              
              <div className="space-y-6">
                <div>
                  <Label>Theme</Label>
                  <div className="grid grid-cols-3 gap-4 mt-3">
                    <button
                      onClick={() => setTheme('light')}
                      className={`p-4 rounded-lg border-2 transition-colors ${
                        theme === 'light' 
                          ? 'border-primary bg-primary/10' 
                          : 'border-border hover:border-primary/50'
                      }`}
                    >
                      <Sun className="w-6 h-6 mx-auto mb-2" />
                      <span className="text-sm">Light</span>
                    </button>
                    
                    <button
                      onClick={() => setTheme('dark')}
                      className={`p-4 rounded-lg border-2 transition-colors ${
                        theme === 'dark' 
                          ? 'border-primary bg-primary/10' 
                          : 'border-border hover:border-primary/50'
                      }`}
                    >
                      <Moon className="w-6 h-6 mx-auto mb-2" />
                      <span className="text-sm">Dark</span>
                    </button>
                    
                    <button
                      onClick={() => setTheme('system')}
                      className={`p-4 rounded-lg border-2 transition-colors ${
                        theme === 'system' 
                          ? 'border-primary bg-primary/10' 
                          : 'border-border hover:border-primary/50'
                      }`}
                    >
                      <Monitor className="w-6 h-6 mx-auto mb-2" />
                      <span className="text-sm">System</span>
                    </button>
                  </div>
                </div>

                <div>
                  <Label htmlFor="font-size">Font size</Label>
                  <Select
                    id="font-size"
                    value={settings.appearance.fontSize}
                    onValueChange={(value) => 
                      handleSaveSettings('appearance', { fontSize: value })
                    }
                    className="mt-2"
                  >
                    <option value="small">Small</option>
                    <option value="medium">Medium</option>
                    <option value="large">Large</option>
                    <option value="extra-large">Extra Large</option>
                  </Select>
                </div>

                <div className="flex items-center justify-between">
                  <div>
                    <Label htmlFor="animations">Enable animations</Label>
                    <p className="text-sm text-muted-foreground">
                      Show smooth transitions and effects
                    </p>
                  </div>
                  <Switch
                    id="animations"
                    checked={settings.appearance.animations}
                    onCheckedChange={(checked) => 
                      handleSaveSettings('appearance', { animations: checked })
                    }
                  />
                </div>

                <div className="flex items-center justify-between">
                  <div>
                    <Label htmlFor="compact-mode">Compact mode</Label>
                    <p className="text-sm text-muted-foreground">
                      Reduce spacing for more content
                    </p>
                  </div>
                  <Switch
                    id="compact-mode"
                    checked={settings.appearance.compactMode}
                    onCheckedChange={(checked) => 
                      handleSaveSettings('appearance', { compactMode: checked })
                    }
                  />
                </div>
              </div>
            </Card>
          </TabsContent>

          {/* Audio & Video Settings */}
          <TabsContent value="audio" className="space-y-6">
            <Card className="p-6">
              <h2 className="text-xl font-semibold mb-4">Audio & Video Settings</h2>
              
              <div className="space-y-6">
                <div>
                  <Label htmlFor="voice-output">Voice output</Label>
                  <Select
                    id="voice-output"
                    value={settings.audio.voiceOutput}
                    onValueChange={(value) => 
                      handleSaveSettings('audio', { voiceOutput: value })
                    }
                    className="mt-2"
                  >
                    <option value="default">System default</option>
                    <option value="male">Male voice</option>
                    <option value="female">Female voice</option>
                    <option value="neutral">Neutral voice</option>
                  </Select>
                </div>

                <div className="flex items-center justify-between">
                  <div>
                    <Label htmlFor="auto-play-voice">Auto-play voice messages</Label>
                    <p className="text-sm text-muted-foreground">
                      Automatically play voice responses
                    </p>
                  </div>
                  <Switch
                    id="auto-play-voice"
                    checked={settings.audio.autoPlayVoice}
                    onCheckedChange={(checked) => 
                      handleSaveSettings('audio', { autoPlayVoice: checked })
                    }
                  />
                </div>

                <div className="flex items-center justify-between">
                  <div>
                    <Label htmlFor="sound-effects">Sound effects</Label>
                    <p className="text-sm text-muted-foreground">
                      Play sounds for notifications and actions
                    </p>
                  </div>
                  <Switch
                    id="sound-effects"
                    checked={settings.audio.soundEffects}
                    onCheckedChange={(checked) => 
                      handleSaveSettings('audio', { soundEffects: checked })
                    }
                  />
                </div>

                <Separator />

                <h3 className="font-medium">Video Settings</h3>

                <div>
                  <Label htmlFor="video-quality">Default video quality</Label>
                  <Select
                    id="video-quality"
                    value={settings.video.quality}
                    onValueChange={(value) => 
                      handleSaveSettings('video', { quality: value })
                    }
                    className="mt-2"
                  >
                    <option value="auto">Auto</option>
                    <option value="1080p">1080p HD</option>
                    <option value="720p">720p</option>
                    <option value="480p">480p</option>
                  </Select>
                </div>

                <div className="flex items-center justify-between">
                  <div>
                    <Label htmlFor="background-blur">Background blur</Label>
                    <p className="text-sm text-muted-foreground">
                      Blur background in video calls
                    </p>
                  </div>
                  <Switch
                    id="background-blur"
                    checked={settings.video.backgroundBlur}
                    onCheckedChange={(checked) => 
                      handleSaveSettings('video', { backgroundBlur: checked })
                    }
                  />
                </div>
              </div>
            </Card>
          </TabsContent>

          {/* Account Settings */}
          <TabsContent value="account" className="space-y-6">
            <Card className="p-6">
              <h2 className="text-xl font-semibold mb-4">Account Settings</h2>
              
              <div className="space-y-6">
                <div>
                  <Label htmlFor="email">Email address</Label>
                  <Input
                    id="email"
                    type="email"
                    value={user?.email || ''}
                    disabled
                    className="mt-2"
                  />
                  <Button variant="link" className="px-0 mt-2">
                    Change email address
                  </Button>
                </div>

                <div>
                  <Label>Password</Label>
                  <p className="text-sm text-muted-foreground mb-2">
                    Last changed {settings.account.passwordLastChanged}
                  </p>
                  <Button variant="outline">
                    <Key className="w-4 h-4 mr-2" />
                    Change password
                  </Button>
                </div>

                <Separator />

                <div>
                  <h3 className="font-medium mb-4">Two-factor authentication</h3>
                  {settings.account.twoFactorEnabled ? (
                    <div className="flex items-center justify-between p-4 rounded-lg bg-green-50 dark:bg-green-950/20 border border-green-200 dark:border-green-800">
                      <div className="flex items-center gap-3">
                        <Shield className="w-5 h-5 text-green-600" />
                        <div>
                          <p className="font-medium text-green-600">Enabled</p>
                          <p className="text-sm text-muted-foreground">
                            Your account is protected with 2FA
                          </p>
                        </div>
                      </div>
                      <Button variant="outline" size="sm">Manage</Button>
                    </div>
                  ) : (
                    <div className="flex items-center justify-between p-4 rounded-lg bg-amber-50 dark:bg-amber-950/20 border border-amber-200 dark:border-amber-800">
                      <div className="flex items-center gap-3">
                        <AlertCircle className="w-5 h-5 text-amber-600" />
                        <div>
                          <p className="font-medium text-amber-600">Not enabled</p>
                          <p className="text-sm text-muted-foreground">
                            Add an extra layer of security to your account
                          </p>
                        </div>
                      </div>
                      <Button variant="outline" size="sm">Enable</Button>
                    </div>
                  )}
                </div>

                <Separator />

                <div className="space-y-3">
                  <Button 
                    variant="outline" 
                    className="w-full justify-start"
                    onClick={() => {
                      logout();
                      router.push('/');
                    }}
                  >
                    <LogOut className="w-4 h-4 mr-2" />
                    Sign out
                  </Button>
                </div>
              </div>
            </Card>
          </TabsContent>
        </Tabs>
      </div>

      {/* Delete Account Dialog */}
      <Dialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>
        <div className="p-6 max-w-md">
          <h3 className="text-lg font-semibold mb-4">Delete Account</h3>
          <p className="text-muted-foreground mb-6">
            Are you sure you want to delete your account? This action cannot be undone and all your data will be permanently deleted.
          </p>
          <div className="flex gap-3">
            <Button
              variant="destructive"
              className="flex-1"
              onClick={handleDeleteAccount}
            >
              Delete Account
            </Button>
            <Button
              variant="outline"
              className="flex-1"
              onClick={() => setShowDeleteDialog(false)}
            >
              Cancel
            </Button>
          </div>
        </div>
      </Dialog>
    </div>
  );
}