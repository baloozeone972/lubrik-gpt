// =============================================================================
// File: components/ai/VideoGenerator.tsx
// Generated by TypeScriptFileParser
// Date: Thu Jun 19 21:11:26 CEST 2025
// =============================================================================

import React, { useState, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
  Video, Upload, Wand2, Download, X, Play, Pause,
  Settings, Sparkles, Image, Film, Loader2
} from 'lucide-react';
import { VideoGenerationService } from '@/services/ai/VideoGenerationService';
import { Button } from '@/components/ui/Button';
import { Card } from '@/components/ui/Card';
import { Input } from '@/components/ui/Input';
import { Textarea } from '@/components/ui/Textarea';
import { Slider } from '@/components/ui/Slider';
import { Select } from '@/components/ui/Select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/Tabs';
import { Progress } from '@/components/ui/Progress';
import { useToast } from '@/hooks/useToast';

interface VideoGeneratorProps {
  characterId?: string;
  onVideoGenerated?: (videoUrl: string) => void;
}

export function VideoGenerator({ characterId, onVideoGenerated }: VideoGeneratorProps) {
  const { toast } = useToast();
  const [activeTab, setActiveTab] = useState<'text2video' | 'img2video'>('text2video');
  const [isGenerating, setIsGenerating] = useState(false);
  const [progress, setProgress] = useState(0);
  const [progressStage, setProgressStage] = useState('');
  const [generatedVideoUrl, setGeneratedVideoUrl] = useState<string | null>(null);
  const [previewUrl, setPreviewUrl] = useState<string | null>(null);
  
  // Text to Video settings
  const [prompt, setPrompt] = useState('');
  const [negativePrompt, setNegativePrompt] = useState('');
  const [duration, setDuration] = useState(4);
  const [fps, setFps] = useState(8);
  const [resolution, setResolution] = useState('512x512');
  
  // Image to Video settings
  const [sourceImage, setSourceImage] = useState<File | null>(null);
  const [motionStrength, setMotionStrength] = useState(127);
  
  // Advanced settings
  const [guidanceScale, setGuidanceScale] = useState(7.5);
  const [steps, setSteps] = useState(25);
  const [seed, setSeed] = useState(-1);

  const videoService = new VideoGenerationService({
    apiUrl: process.env.NEXT_PUBLIC_VIDEO_API_URL!,
    apiKey: process.env.NEXT_PUBLIC_VIDEO_API_KEY!,
    model: 'animatediff'
  });

  useEffect(() => {
    videoService.on('progress', (data) => {
      setProgress(data.progress);
      setProgressStage(data.stage);
      if (data.preview) {
        setPreviewUrl(data.preview);
      }
    });

    return () => {
      videoService.removeAllListeners();
    };
  }, []);

  const handleGenerateText2Video = async () => {
    if (!prompt.trim()) {
      toast({
        title: 'Error',
        description: 'Please enter a prompt',
        variant: 'destructive'
      });
      return;
    }

    setIsGenerating(true);
    setProgress(0);
    setGeneratedVideoUrl(null);

    try {
      const [width, height] = resolution.split('x').map(Number);
      
      const videoUrl = await videoService.generateVideo({
        prompt,
        negativePrompt,
        width,
        height,
        fps,
        duration,
        guidanceScale,
        numInferenceSteps: steps,
        seed: seed === -1 ? undefined : seed
      });

      setGeneratedVideoUrl(videoUrl);
      onVideoGenerated?.(videoUrl);
      
      toast({
        title: 'Success',
        description: 'Video generated successfully!'
      });
    } catch (error) {
      console.error('Video generation failed:', error);
      toast({
        title: 'Generation Failed',
        description: error instanceof Error ? error.message : 'Unknown error',
        variant: 'destructive'
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const handleGenerateImg2Video = async () => {
    if (!sourceImage) {
      toast({
        title: 'Error',
        description: 'Please select an image',
        variant: 'destructive'
      });
      return;
    }

    setIsGenerating(true);
    setProgress(0);
    setGeneratedVideoUrl(null);

    try {
      // Upload image first
      const formData = new FormData();
      formData.append('image', sourceImage);
      
      const uploadResponse = await fetch('/api/v1/media/upload', {
        method: 'POST',
        body: formData
      });
      
      const { url: imageUrl } = await uploadResponse.json();

      const videoUrl = await videoService.generateFromImage(imageUrl, {
        duration,
        fps,
        motionBucketId: motionStrength,
        guidanceScale,
        numInferenceSteps: steps
      });

      setGeneratedVideoUrl(videoUrl);
      onVideoGenerated?.(videoUrl);
      
      toast({
        title: 'Success',
        description: 'Video generated from image successfully!'
      });
    } catch (error) {
      console.error('Video generation failed:', error);
      toast({
        title: 'Generation Failed',
        description: error instanceof Error ? error.message : 'Unknown error',
        variant: 'destructive'
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const handleImageSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setSourceImage(file);
      const reader = new FileReader();
      reader.onload = (e) => {
        setPreviewUrl(e.target?.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  const downloadVideo = () => {
    if (generatedVideoUrl) {
      const a = document.createElement('a');
      a.href = generatedVideoUrl;
      a.download = `generated-video-${Date.now()}.mp4`;
      a.click();
    }
  };

  return (
    <Card className="p-6">
      <div className="mb-6">
        <h2 className="text-2xl font-bold mb-2">AI Video Generator</h2>
        <p className="text-muted-foreground">
          Create stunning videos from text or images using AI
        </p>
      </div>

      <Tabs value={activeTab} onValueChange={(v) => setActiveTab(v as any)}>
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="text2video">
            <Wand2 className="w-4 h-4 mr-2" />
            Text to Video
          </TabsTrigger>
          <TabsTrigger value="img2video">
            <Image className="w-4 h-4 mr-2" />
            Image to Video
          </TabsTrigger>
        </TabsList>

        <TabsContent value="text2video" className="space-y-4 mt-6">
          <div>
            <label className="text-sm font-medium mb-2 block">Prompt</label>
            <Textarea
              placeholder="Describe the video you want to generate..."
              value={prompt}
              onChange={(e) => setPrompt(e.target.value)}
              rows={4}
              className="resize-none"
            />
          </div>

          <div>
            <label className="text-sm font-medium mb-2 block">
              Negative Prompt (Optional)
            </label>
            <Textarea
              placeholder="What you don't want in the video..."
              value={negativePrompt}
              onChange={(e) => setNegativePrompt(e.target.value)}
              rows={2}
              className="resize-none"
            />
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="text-sm font-medium mb-2 block">Resolution</label>
              <Select
                value={resolution}
                onValueChange={setResolution}
              >
                <option value="512x512">512x512</option>
                <option value="512x768">512x768 (Portrait)</option>
                <option value="768x512">768x512 (Landscape)</option>
                <option value="1024x1024">1024x1024 (HD)</option>
              </Select>
            </div>

            <div>
              <label className="text-sm font-medium mb-2 block">
                Duration: {duration}s
              </label>
              <Slider
                value={[duration]}
                onValueChange={([v]) => setDuration(v)}
                min={2}
                max={8}
                step={1}
              />
            </div>
          </div>
        </TabsContent>

        <TabsContent value="img2video" className="space-y-4 mt-6">
          <div>
            <label className="text-sm font-medium mb-2 block">Source Image</label>
            <div className="border-2 border-dashed rounded-lg p-8 text-center">
              {previewUrl ? (
                <div className="relative">
                  <img
                    src={previewUrl}
                    alt="Source"
                    className="max-w-full max-h-64 mx-auto rounded"
                  />
                  <Button
                    variant="ghost"
                    size="sm"
                    className="absolute top-2 right-2"
                    onClick={() => {
                      setSourceImage(null);
                      setPreviewUrl(null);
                    }}
                  >
                    <X className="w-4 h-4" />
                  </Button>
                </div>
              ) : (
                <label className="cursor-pointer">
                  <Upload className="w-12 h-12 mx-auto mb-4 text-muted-foreground" />
                  <p className="text-muted-foreground mb-2">
                    Click to upload or drag and drop
                  </p>
                  <p className="text-xs text-muted-foreground">
                    PNG, JPG up to 10MB
                  </p>
                  <input
                    type="file"
                    accept="image/*"
                    onChange={handleImageSelect}
                    className="hidden"
                  />
                </label>
              )}
            </div>
          </div>

          <div>
            <label className="text-sm font-medium mb-2 block">
              Motion Strength: {motionStrength}
            </label>
            <Slider
              value={[motionStrength]}
              onValueChange={([v]) => setMotionStrength(v)}
              min={1}
              max={255}
              step={1}
            />
            <p className="text-xs text-muted-foreground mt-1">
              Higher values create more motion
            </p>
          </div>
        </TabsContent>

        {/* Advanced Settings */}
        <details className="mt-6">
          <summary className="cursor-pointer text-sm font-medium mb-4">
            Advanced Settings
          </summary>
          <div className="space-y-4 mt-4">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="text-sm font-medium mb-2 block">
                  FPS: {fps}
                </label>
                <Slider
                  value={[fps]}
                  onValueChange={([v]) => setFps(v)}
                  min={4}
                  max={24}
                  step={1}
                />
              </div>

              <div>
                <label className="text-sm font-medium mb-2 block">
                  Guidance Scale: {guidanceScale}
                </label>
                <Slider
                  value={[guidanceScale]}
                  onValueChange={([v]) => setGuidanceScale(v)}
                  min={1}
                  max={20}
                  step={0.5}
                />
              </div>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="text-sm font-medium mb-2 block">
                  Steps: {steps}
                </label>
                <Slider
                  value={[steps]}
                  onValueChange={([v]) => setSteps(v)}
                  min={10}
                  max={50}
                  step={1}
                />
              </div>

              <div>
                <label className="text-sm font-medium mb-2 block">Seed</label>
                <Input
                  type="number"
                  value={seed}
                  onChange={(e) => setSeed(parseInt(e.target.value) || -1)}
                  placeholder="-1 for random"
                />
              </div>
            </div>
          </div>
        </details>

        {/* Generation Progress */}
        {isGenerating && (
          <Card className="mt-6 p-4 bg-primary/5">
            <div className="flex items-center justify-between mb-2">
              <div className="flex items-center gap-2">
                <Loader2 className="w-4 h-4 animate-spin" />
                <span className="text-sm font-medium">
                  {progressStage || 'Initializing...'}
                </span>
              </div>
              <span className="text-sm text-muted-foreground">{progress}%</span>
            </div>
            <Progress value={progress} className="h-2" />
            
            {previewUrl && progressStage === 'processing' && (
              <div className="mt-4">
                <p className="text-sm text-muted-foreground mb-2">Preview:</p>
                <img
                  src={previewUrl}
                  alt="Generation preview"
                  className="w-full rounded"
                />
              </div>
            )}
          </Card>
        )}

        {/* Generated Video */}
        {generatedVideoUrl && (
          <Card className="mt-6 p-4">
            <div className="space-y-4">
              <video
                src={generatedVideoUrl}
                controls
                autoPlay
                loop
                className="w-full rounded"
              />
              
              <div className="flex gap-2">
                <Button onClick={downloadVideo} className="flex-1">
                  <Download className="w-4 h-4 mr-2" />
                  Download Video
                </Button>
                <Button
                  variant="outline"
                  onClick={() => {
                    setGeneratedVideoUrl(null);
                    setPreviewUrl(null);
                  }}
                >
                  Generate New
                </Button>
              </div>
            </div>
          </Card>
        )}

        {/* Generate Button */}
        <Button
          onClick={activeTab === 'text2video' ? handleGenerateText2Video : handleGenerateImg2Video}
          disabled={isGenerating}
          className="w-full mt-6"
          size="lg"
        >
          {isGenerating ? (
            <>
              <Loader2 className="w-5 h-5 mr-2 animate-spin" />
              Generating... ({progress}%)
            </>
          ) : (
            <>
              <Sparkles className="w-5 h-5 mr-2" />
              Generate Video
            </>
          )}
        </Button>
      </Tabs>
    </Card>
  );
}