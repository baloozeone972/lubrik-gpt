// =============================================================================
// File: components/voice/VoiceCloner.tsx
// Generated by TypeScriptFileParser
// Date: Thu Jun 19 21:11:26 CEST 2025
// =============================================================================

import React, { useState, useRef, useEffect } from 'react';
import { motion } from 'framer-motion';
import {
  Mic, MicOff, Play, Pause, Upload, Download,
  Volume2, Settings, Trash2, Plus, Loader2
} from 'lucide-react';
import { VoiceCloningService, VoiceProfile } from '@/services/ai/VoiceCloningService';
import { Button } from '@/components/ui/Button';
import { Card } from '@/components/ui/Card';
import { Input } from '@/components/ui/Input';
import { Textarea } from '@/components/ui/Textarea';
import { Slider } from '@/components/ui/Slider';
import { Select } from '@/components/ui/Select';
import { Progress } from '@/components/ui/Progress';
import { useToast } from '@/hooks/useToast';
import { WaveformVisualizer } from './WaveformVisualizer';

export function VoiceCloner() {
  const { toast } = useToast();
  const [isRecording, setIsRecording] = useState(false);
  const [isPlaying, setIsPlaying] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);
  const [text, setText] = useState('');
  const [selectedVoice, setSelectedVoice] = useState<VoiceProfile | null>(null);
  const [voiceProfiles, setVoiceProfiles] = useState<VoiceProfile[]>([]);
  const [recordedAudio, setRecordedAudio] = useState<Blob | null>(null);
  const [generatedAudio, setGeneratedAudio] = useState<ArrayBuffer | null>(null);
  
  // Voice settings
  const [emotion, setEmotion] = useState<'neutral' | 'happy' | 'sad' | 'angry' | 'surprised'>('neutral');
  const [speed, setSpeed] = useState(1.0);
  const [pitch, setPitch] = useState(1.0);
  
  const mediaRecorderRef = useRef<MediaRecorder | null>(null);
  const audioRef = useRef<HTMLAudioElement | null>(null);
  const chunksRef = useRef<Blob[]>([]);

  const voiceService = new VoiceCloningService({
    apiUrl: process.env.NEXT_PUBLIC_VOICE_API_URL!,
    apiKey: process.env.NEXT_PUBLIC_VOICE_API_KEY!,
    model: 'coqui-xtts'
  });

  useEffect(() => {
    loadVoiceProfiles();
  }, []);

  const loadVoiceProfiles = async () => {
    try {
      const profiles = await voiceService.getVoiceProfiles();
      setVoiceProfiles(profiles);
    } catch (error) {
      console.error('Failed to load voice profiles:', error);
    }
  };

  const startRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      const mediaRecorder = new MediaRecorder(stream);
      mediaRecorderRef.current = mediaRecorder;
      chunksRef.current = [];

      mediaRecorder.ondataavailable = (event) => {
        if (event.data.size > 0) {
          chunksRef.current.push(event.data);
        }
      };

      mediaRecorder.onstop = () => {
        const blob = new Blob(chunksRef.current, { type: 'audio/wav' });
        setRecordedAudio(blob);
        stream.getTracks().forEach(track => track.stop());
      };

      mediaRecorder.start();
      setIsRecording(true);
    } catch (error) {
      console.error('Failed to start recording:', error);
      toast({
        title: 'Recording Failed',
        description: 'Could not access microphone',
        variant: 'destructive'
      });
    }
  };

  const stopRecording = () => {
    if (mediaRecorderRef.current && isRecording) {
      mediaRecorderRef.current.stop();
      setIsRecording(false);
    }
  };

  const createVoiceProfile = async () => {
    if (!recordedAudio) {
      toast({
        title: 'No Recording',
        description: 'Please record audio first',
        variant: 'destructive'
      });
      return;
    }

    const name = prompt('Enter a name for this voice profile:');
    if (!name) return;

    try {
      const file = new File([recordedAudio], 'voice-sample.wav', { type: 'audio/wav' });
      const profile = await voiceService.createVoiceProfile(file, {
        name,
        language: 'en',
        gender: 'neutral',
        age: 'adult'
      });

      setVoiceProfiles([...voiceProfiles, profile]);
      setSelectedVoice(profile);
      
      toast({
        title: 'Voice Profile Created',
        description: `Successfully created voice profile "${name}"`
      });
    } catch (error) {
      console.error('Failed to create voice profile:', error);
      toast({
        title: 'Creation Failed',
        description: 'Could not create voice profile',
        variant: 'destructive'
      });
    }
  };

  const generateSpeech = async () => {
    if (!text.trim() || !selectedVoice) {
      toast({
        title: 'Missing Input',
        description: 'Please enter text and select a voice',
        variant: 'destructive'
      });
      return;
    }

    setIsGenerating(true);
    setGeneratedAudio(null);

    try {
      const audio = await voiceService.cloneVoice({
        text,
        voiceId: selectedVoice.id,
        emotion,
        speed,
        pitch
      });

      setGeneratedAudio(audio);
      playGeneratedAudio(audio);
      
      toast({
        title: 'Speech Generated',
        description: 'Your text has been converted to speech'
      });
    } catch (error) {
      console.error('Speech generation failed:', error);
      toast({
        title: 'Generation Failed',
        description: 'Could not generate speech',
        variant: 'destructive'
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const playGeneratedAudio = (audioBuffer: ArrayBuffer) => {
    const blob = new Blob([audioBuffer], { type: 'audio/wav' });
    const url = URL.createObjectURL(blob);
    
    if (audioRef.current) {
      audioRef.current.src = url;
      audioRef.current.play();
      setIsPlaying(true);
      
      audioRef.current.onended = () => {
        setIsPlaying(false);
        URL.revokeObjectURL(url);
      };
    }
  };

  const downloadAudio = () => {
    if (!generatedAudio) return;

    const blob = new Blob([generatedAudio], { type: 'audio/wav' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `generated-speech-${Date.now()}.wav`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const deleteVoiceProfile = async (profileId: string) => {
    try {
      await voiceService.deleteVoiceProfile(profileId);
      setVoiceProfiles(voiceProfiles.filter(p => p.id !== profileId));
      
      if (selectedVoice?.id === profileId) {
        setSelectedVoice(null);
      }
      
      toast({
        title: 'Profile Deleted',
        description: 'Voice profile has been removed'
      });
    } catch (error) {
      console.error('Failed to delete profile:', error);
      toast({
        title: 'Deletion Failed',
        description: 'Could not delete voice profile',
        variant: 'destructive'
      });
    }
  };

  return (
    <div className="space-y-6">
      {/* Voice Profiles */}
      <Card className="p-6">
        <h3 className="text-lg font-semibold mb-4">Voice Profiles</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-4">
          {voiceProfiles.map((profile) => (
            <motion.div
              key={profile.id}
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
            >
              <Card
                className={`p-4 cursor-pointer transition-all ${
                  selectedVoice?.id === profile.id
                    ? 'ring-2 ring-primary'
                    : 'hover:ring-1 hover:ring-primary/50'
                }`}
                onClick={() => setSelectedVoice(profile)}
              >
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <div className="w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center">
                      <Volume2 className="w-5 h-5 text-primary" />
                    </div>
                    <div>
                      <p className="font-medium">{profile.name}</p>
                      <p className="text-sm text-muted-foreground">
                        {profile.language} â€¢ {profile.gender}
                      </p>
                    </div>
                  </div>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={(e) => {
                      e.stopPropagation();
                      deleteVoiceProfile(profile.id);
                    }}
                  >
                    <Trash2 className="w-4 h-4" />
                  </Button>
                </div>
              </Card>
            </motion.div>
          ))}
          
          {/* Add New Voice */}
          <Card
            className="p-4 border-dashed cursor-pointer hover:bg-muted/50 transition-colors"
            onClick={() => document.getElementById('voice-recorder')?.scrollIntoView()}
          >
            <div className="flex flex-col items-center justify-center h-full">
              <Plus className="w-8 h-8 text-muted-foreground mb-2" />
              <p className="text-sm text-muted-foreground">Add Voice</p>
            </div>
          </Card>
        </div>
      </Card>

      {/* Voice Recorder */}
      <Card id="voice-recorder" className="p-6">
        <h3 className="text-lg font-semibold mb-4">Record Voice Sample</h3>
        
        <div className="space-y-4">
          <div className="flex items-center justify-center">
            <Button
              size="lg"
              variant={isRecording ? 'destructive' : 'default'}
              className="rounded-full w-24 h-24"
              onClick={isRecording ? stopRecording : startRecording}
            >
              {isRecording ? (
                <MicOff className="w-8 h-8" />
              ) : (
                <Mic className="w-8 h-8" />
              )}
            </Button>
          </div>
          
          {isRecording && (
            <div className="text-center">
              <p className="text-sm text-muted-foreground mb-2">Recording...</p>
              <WaveformVisualizer isActive={isRecording} />
            </div>
          )}
          
          {recordedAudio && !isRecording && (
            <div className="flex items-center justify-center gap-4">
              <Button
                variant="outline"
                onClick={() => {
                  const url = URL.createObjectURL(recordedAudio);
                  const audio = new Audio(url);
                  audio.play();
                  audio.onended = () => URL.revokeObjectURL(url);
                }}
              >
                <Play className="w-4 h-4 mr-2" />
                Play Recording
              </Button>
              <Button onClick={createVoiceProfile}>
                <Plus className="w-4 h-4 mr-2" />
                Create Profile
              </Button>
            </div>
          )}
        </div>
      </Card>

      {/* Text to Speech */}
      <Card className="p-6">
        <h3 className="text-lg font-semibold mb-4">Generate Speech</h3>
        
        <div className="space-y-4">
          <div>
            <label className="text-sm font-medium mb-2 block">Text</label>
            <Textarea
              placeholder="Enter the text you want to convert to speech..."
              value={text}
              onChange={(e) => setText(e.target.value)}
              rows={4}
              className="resize-none"
            />
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <label className="text-sm font-medium mb-2 block">Emotion</label>
              <Select value={emotion} onValueChange={(v) => setEmotion(v as any)}>
                <option value="neutral">Neutral</option>
                <option value="happy">Happy</option>
                <option value="sad">Sad</option>
                <option value="angry">Angry</option>
                <option value="surprised">Surprised</option>
              </Select>
            </div>

            <div>
              <label className="text-sm font-medium mb-2 block">
                Speed: {speed.toFixed(1)}x
              </label>
              <Slider
                value={[speed]}
                onValueChange={([v]) => setSpeed(v)}
                min={0.5}
                max={2.0}
                step={0.1}
              />
            </div>

            <div>
              <label className="text-sm font-medium mb-2 block">
                Pitch: {pitch.toFixed(1)}x
              </label>
              <Slider
                value={[pitch]}
                onValueChange={([v]) => setPitch(v)}
                min={0.5}
                max={2.0}
                step={0.1}
              />
            </div>
          </div>

          <Button
            onClick={generateSpeech}
            disabled={isGenerating || !selectedVoice || !text.trim()}
            className="w-full"
            size="lg"
          >
            {isGenerating ? (
              <>
                <Loader2 className="w-5 h-5 mr-2 animate-spin" />
                Generating Speech...
              </>
            ) : (
              <>
                <Volume2 className="w-5 h-5 mr-2" />
                Generate Speech
              </>
            )}
          </Button>

          {generatedAudio && (
            <div className="flex gap-2">
              <Button
                variant="outline"
                onClick={() => playGeneratedAudio(generatedAudio)}
                disabled={isPlaying}
                className="flex-1"
              >
                {isPlaying ? (
                  <>
                    <Pause className="w-4 h-4 mr-2" />
                    Playing...
                  </>
                ) : (
                  <>
                    <Play className="w-4 h-4 mr-2" />
                    Play Audio
                  </>
                )}
              </Button>
              <Button variant="outline" onClick={downloadAudio}>
                <Download className="w-4 h-4 mr-2" />
                Download
              </Button>
            </div>
          )}
        </div>
      </Card>

      <audio ref={audioRef} className="hidden" />
    </div>
  );
}