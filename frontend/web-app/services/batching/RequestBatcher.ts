// =============================================================================
// File: services/batching/RequestBatcher.ts
// Generated by TypeScriptFileParser
// Date: Thu Jun 19 21:11:26 CEST 2025
// =============================================================================

export class RequestBatcher<T, R> {
  private batchFn: (items: T[]) => Promise<R[]>;
  private batchSize: number;
  private batchDelay: number;
  private pendingRequests: Array<{
    item: T;
    resolve: (value: R) => void;
    reject: (error: any) => void;
  }> = [];
  private batchTimeout: NodeJS.Timeout | null = null;

  constructor(
    batchFn: (items: T[]) => Promise<R[]>,
    options: {
      batchSize?: number;
      batchDelay?: number;
    } = {}
  ) {
    this.batchFn = batchFn;
    this.batchSize = options.batchSize || 100;
    this.batchDelay = options.batchDelay || 10;
  }

  async add(item: T): Promise<R> {
    return new Promise((resolve, reject) => {
      this.pendingRequests.push({ item, resolve, reject });

      if (this.pendingRequests.length >= this.batchSize) {
        this.executeBatch();
      } else if (!this.batchTimeout) {
        this.batchTimeout = setTimeout(() => {
          this.executeBatch();
        }, this.batchDelay);
      }
    });
  }

  private async executeBatch() {
    if (this.batchTimeout) {
      clearTimeout(this.batchTimeout);
      this.batchTimeout = null;
    }

    const batch = this.pendingRequests.splice(0, this.batchSize);
    if (batch.length === 0) return;

    try {
      const items = batch.map(req => req.item);
      const results = await this.batchFn(items);

      if (results.length !== batch.length) {
        throw new Error('Batch function returned wrong number of results');
      }

      batch.forEach((req, index) => {
        req.resolve(results[index]);
      });
    } catch (error) {
      batch.forEach(req => {
        req.reject(error);
      });
    }
  }
}

// Example usage:
const userBatcher = new RequestBatcher<string, User>(
  async (userIds: string[]) => {
    // Batch fetch users
    return await userRepository.findByIds(userIds);
  },
  { batchSize: 50, batchDelay: 5 }
);

// Individual requests are automatically batched
const user1 = await userBatcher.add('user-1');
const user2 = await userBatcher.add('user-2');
// These will be fetched in a single query