// =============================================================================
// File: services/cache/RedisCacheService.ts
// Generated by TypeScriptFileParser
// Date: Thu Jun 19 21:11:26 CEST 2025
// =============================================================================

import Redis from 'ioredis';
import { createHash } from 'crypto';
import { compress, decompress } from 'lz-string';

interface CacheConfig {
  host: string;
  port: number;
  password?: string;
  db?: number;
  keyPrefix?: string;
  ttl?: number; // seconds
  enableCompression?: boolean;
  maxMemory?: string;
}

interface CacheOptions {
  ttl?: number;
  tags?: string[];
  compress?: boolean;
}

export class RedisCacheService {
  private redis: Redis;
  private subscriber: Redis;
  private config: CacheConfig;
  private invalidationHandlers: Map<string, Set<() => void>> = new Map();

  constructor(config: CacheConfig) {
    this.config = {
      keyPrefix: 'vc:',
      ttl: 3600, // 1 hour default
      enableCompression: true,
      ...config
    };

    this.redis = new Redis({
      host: config.host,
      port: config.port,
      password: config.password,
      db: config.db || 0,
      maxRetriesPerRequest: 3,
      enableReadyCheck: true,
      lazyConnect: true
    });

    this.subscriber = this.redis.duplicate();
    this.setupEventHandlers();
    this.configureCaching();
  }

  private setupEventHandlers() {
    this.redis.on('error', (error) => {
      console.error('Redis error:', error);
    });

    this.redis.on('ready', () => {
      console.log('Redis connection established');
    });

    // Setup invalidation subscription
    this.subscriber.psubscribe(`${this.config.keyPrefix}invalidate:*`);
    this.subscriber.on('pmessage', (pattern, channel, message) => {
      const tag = channel.replace(`${this.config.keyPrefix}invalidate:`, '');
      this.handleInvalidation(tag);
    });
  }

  private async configureCaching() {
    if (this.config.maxMemory) {
      await this.redis.config('SET', 'maxmemory', this.config.maxMemory);
      await this.redis.config('SET', 'maxmemory-policy', 'allkeys-lru');
    }
  }

  private generateKey(key: string): string {
    return `${this.config.keyPrefix}${key}`;
  }

  private hashKey(key: string): string {
    return createHash('sha256').update(key).digest('hex').substring(0, 16);
  }

  async get<T>(key: string): Promise<T | null> {
    try {
      const fullKey = this.generateKey(key);
      const value = await this.redis.get(fullKey);
      
      if (!value) return null;

      let parsed = JSON.parse(value);
      
      // Handle compression
      if (parsed.compressed && this.config.enableCompression) {
        parsed.data = JSON.parse(decompress(parsed.data));
      }

      // Update access time for LRU
      await this.redis.expire(fullKey, parsed.ttl || this.config.ttl!);

      return parsed.data as T;
    } catch (error) {
      console.error(`Cache get error for key ${key}:`, error);
      return null;
    }
  }

  async set<T>(
    key: string, 
    value: T, 
    options: CacheOptions = {}
  ): Promise<void> {
    try {
      const fullKey = this.generateKey(key);
      const ttl = options.ttl || this.config.ttl!;
      
      let data: any = value;
      let compressed = false;

      // Compress large values
      if (options.compress !== false && this.config.enableCompression) {
        const stringified = JSON.stringify(value);
        if (stringified.length > 1024) { // Compress if > 1KB
          data = compress(stringified);
          compressed = true;
        }
      }

      const cacheEntry = {
        data,
        compressed,
        ttl,
        tags: options.tags || [],
        timestamp: Date.now()
      };

      await this.redis.setex(fullKey, ttl, JSON.stringify(cacheEntry));

      // Store tags for invalidation
      if (options.tags && options.tags.length > 0) {
        for (const tag of options.tags) {
          await this.redis.sadd(`${this.config.keyPrefix}tag:${tag}`, fullKey);
          await this.redis.expire(`${this.config.keyPrefix}tag:${tag}`, ttl);
        }
      }
    } catch (error) {
      console.error(`Cache set error for key ${key}:`, error);
    }
  }

  async delete(key: string): Promise<void> {
    try {
      const fullKey = this.generateKey(key);
      await this.redis.del(fullKey);
    } catch (error) {
      console.error(`Cache delete error for key ${key}:`, error);
    }
  }

  async invalidateTag(tag: string): Promise<void> {
    try {
      const tagKey = `${this.config.keyPrefix}tag:${tag}`;
      const keys = await this.redis.smembers(tagKey);
      
      if (keys.length > 0) {
        await this.redis.del(...keys);
        await this.redis.del(tagKey);
      }

      // Publish invalidation event
      await this.redis.publish(`${this.config.keyPrefix}invalidate:${tag}`, '1');
    } catch (error) {
      console.error(`Cache invalidate tag error for ${tag}:`, error);
    }
  }

  async flush(): Promise<void> {
    try {
      const keys = await this.redis.keys(`${this.config.keyPrefix}*`);
      if (keys.length > 0) {
        await this.redis.del(...keys);
      }
    } catch (error) {
      console.error('Cache flush error:', error);
    }
  }

  // Memoization decorator
  memoize<T extends (...args: any[]) => Promise<any>>(
    fn: T,
    options: {
      ttl?: number;
      keyGenerator?: (...args: Parameters<T>) => string;
      tags?: string[];
    } = {}
  ): T {
    return (async (...args: Parameters<T>): Promise<ReturnType<T>> => {
      const key = options.keyGenerator 
        ? options.keyGenerator(...args)
        : `memoize:${fn.name}:${this.hashKey(JSON.stringify(args))}`;

      const cached = await this.get<ReturnType<T>>(key);
      if (cached !== null) {
        return cached;
      }

      const result = await fn(...args);
      await this.set(key, result, {
        ttl: options.ttl,
        tags: options.tags
      });

      return result;
    }) as T;
  }

  // Cache-aside pattern helper
  async getOrSet<T>(
    key: string,
    factory: () => Promise<T>,
    options: CacheOptions = {}
  ): Promise<T> {
    const cached = await this.get<T>(key);
    if (cached !== null) {
      return cached;
    }

    const value = await factory();
    await this.set(key, value, options);
    return value;
  }

  // Batch operations
  async mget<T>(keys: string[]): Promise<(T | null)[]> {
    try {
      const fullKeys = keys.map(k => this.generateKey(k));
      const values = await this.redis.mget(...fullKeys);
      
      return values.map(value => {
        if (!value) return null;
        
        try {
          const parsed = JSON.parse(value);
          if (parsed.compressed && this.config.enableCompression) {
            parsed.data = JSON.parse(decompress(parsed.data));
          }
          return parsed.data as T;
        } catch {
          return null;
        }
      });
    } catch (error) {
      console.error('Cache mget error:', error);
      return keys.map(() => null);
    }
  }

  async mset<T>(entries: Array<{ key: string; value: T; options?: CacheOptions }>): Promise<void> {
    const pipeline = this.redis.pipeline();
    
    for (const entry of entries) {
      const fullKey = this.generateKey(entry.key);
      const ttl = entry.options?.ttl || this.config.ttl!;
      
      let data: any = entry.value;
      let compressed = false;

      if (entry.options?.compress !== false && this.config.enableCompression) {
        const stringified = JSON.stringify(entry.value);
        if (stringified.length > 1024) {
          data = compress(stringified);
          compressed = true;
        }
      }

      const cacheEntry = {
        data,
        compressed,
        ttl,
        tags: entry.options?.tags || [],
        timestamp: Date.now()
      };

      pipeline.setex(fullKey, ttl, JSON.stringify(cacheEntry));
    }
    
    await pipeline.exec();
  }

  // Statistics
  async getStats(): Promise<{
    hits: number;
    misses: number;
    hitRate: number;
    memoryUsage: number;
    totalKeys: number;
  }> {
    const info = await this.redis.info('stats');
    const memory = await this.redis.info('memory');
    const dbSize = await this.redis.dbsize();
    
    // Parse Redis INFO output
    const stats = this.parseRedisInfo(info);
    const memStats = this.parseRedisInfo(memory);
    
    const hits = parseInt(stats.keyspace_hits || '0');
    const misses = parseInt(stats.keyspace_misses || '0');
    const total = hits + misses;
    
    return {
      hits,
      misses,
      hitRate: total > 0 ? hits / total : 0,
      memoryUsage: parseInt(memStats.used_memory || '0'),
      totalKeys: dbSize
    };
  }

  private parseRedisInfo(info: string): Record<string, string> {
    const lines = info.split('\r\n');
    const result: Record<string, string> = {};
    
    for (const line of lines) {
      if (line && !line.startsWith('#')) {
        const [key, value] = line.split(':');
        if (key && value) {
          result[key] = value;
        }
      }
    }
    
    return result;
  }

  // Invalidation handling
  onInvalidate(tag: string, handler: () => void): () => void {
    if (!this.invalidationHandlers.has(tag)) {
      this.invalidationHandlers.set(tag, new Set());
    }
    
    this.invalidationHandlers.get(tag)!.add(handler);
    
    // Return unsubscribe function
    return () => {
      this.invalidationHandlers.get(tag)?.delete(handler);
    };
  }

  private handleInvalidation(tag: string) {
    const handlers = this.invalidationHandlers.get(tag);
    if (handlers) {
      handlers.forEach(handler => handler());
    }
  }

  async close(): Promise<void> {
    await this.redis.quit();
    await this.subscriber.quit();
  }
}